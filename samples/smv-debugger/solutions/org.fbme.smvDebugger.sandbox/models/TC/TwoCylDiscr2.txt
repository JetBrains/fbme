MODULE ButtonDs(event_INIT,event_REQ,event_INITO,event_CHG,LightOn_,Pressed_,alpha, beta) VAR LightOn : boolean; VAR Pressed : boolean; VAR S_smv : {s0_osm, s1_osm, s2_osm}; VAR Q_smv : {START_ecc,INIT_ecc,OFF_ecc,PRESSED_ecc};  VAR NA: 0..1; VAR NI: 0..1;  ASSIGN init(Q_smv):= START_ecc; init(S_smv):= s0_osm; -- _moduleVariablesInitBlock init(LightOn):= FALSE; init(Pressed):= FALSE; init(NA):= 0; init(NI):= 0;  next(Q_smv):= case  Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;  Q_smv=INIT_ecc & S_smv=s1_osm & event_REQ : OFF_ecc;  TRUE : Q_smv; esac; next(S_smv):= case  alpha & S_smv=s0_osm & ExistsInputEvent: s1_osm;  S_smv=s1_osm & ExistsEnabledECTran: s2_osm;  S_smv=s2_osm & NA=0 : s1_osm;  S_smv=s1_osm & (!ExistsEnabledECTran): s0_osm;  TRUE : S_smv; esac;  next(NA):= case  S_smv=s1_osm: 1;  S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1 ) | (Q_smv=INIT_ecc & NA < 1 ) | (Q_smv=OFF_ecc & NA < 1 ) | (Q_smv=PRESSED_ecc & NA < 1 )) : (NA + 1) mod 2;  S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=OFF_ecc & NA = 1) | (Q_smv=PRESSED_ecc & NA = 1)) :  0 ;  TRUE : NA; esac; next(NI):= case  S_smv=s1_osm: 1;  S_smv=s2_osm &  ((Q_smv=START_ecc & NA = 1  & NI < 1 ) | (Q_smv=INIT_ecc & NA = 1  & NI < 1 ) | (Q_smv=OFF_ecc & NA = 1  & NI < 1 ) | (Q_smv=PRESSED_ecc & NA = 1  & NI < 1 )) : (NI + 1) mod 2;  S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 1) | (Q_smv=INIT_ecc & NA = 1 & NI = 1) | (Q_smv=OFF_ecc & NA = 1 & NI = 1) | (Q_smv=PRESSED_ecc & NA = 1 & NI = 1)) :  0 ; TRUE : NI; esac; next(LightOn) := case  alpha & S_smv=s0_osm & (event_INIT | event_REQ) : LightOn_ ;  TRUE : LightOn; esac;  next(Pressed) := case  S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=0 : (FALSE);  S_smv=s2_osm & Q_smv=OFF_ecc & NA=1 & NI=0 : (TRUE);  S_smv=s2_osm & Q_smv=PRESSED_ecc & NA=1 & NI=0 : (TRUE);  TRUE : Pressed; esac;  next(Pressed_) := case S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=OFF_ecc & NA=1) | (Q_smv=PRESSED_ecc & NA=1)) : Pressed;  TRUE : Pressed_; esac;  DEFINE alpha_reset:=  (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran)); DEFINE beta_set:=  (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));  DEFINE event_INIT_reset:= (S_smv=s1_osm); DEFINE event_REQ_reset:= (alpha & ( event_INIT )) | (S_smv=s1_osm);  DEFINE event_INITO_set:= S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA = 1)) ; DEFINE event_CHG_set:= S_smv=s2_osm & NI=0 & ((Q_smv=OFF_ecc & NA = 1) | (Q_smv=PRESSED_ecc & NA = 1)) ;  DEFINE ExistsInputEvent:= event_INIT | event_REQ ; DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc   & (  ( event_INIT )  ) ) | (Q_smv=INIT_ecc   & (  ( event_REQ )  ) ) | (Q_smv=OFF_ecc  ) | (Q_smv=PRESSED_ecc  ); FAIRNESS (alpha) FAIRNESS (beta)   MODULE LinearDA(event_INIT,event_REQ,event_INITO,event_CHG,FWD_,BACK_,HOME_,END_,alpha, beta) VAR FWD : boolean; VAR BACK : boolean; VAR HOME : boolean; VAR END : boolean; VAR S_smv : {s0_osm, s1_osm, s2_osm}; VAR Q_smv : {START_ecc,INIT_ecc,stHOME_ecc,stEND_ecc,ddMOVETO_ecc,ddRETURN_ecc,stSTOP_ecc};  VAR NA: 0..1; VAR NI: 0..2;  ASSIGN init(Q_smv):= START_ecc; init(S_smv):= s0_osm; -- _moduleVariablesInitBlock init(FWD):= FALSE; init(BACK):= FALSE; init(HOME):= FALSE; init(END):= FALSE; init(NA):= 0; init(NI):= 0;  next(Q_smv):= case  Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;  Q_smv=INIT_ecc & S_smv=s1_osm  : stHOME_ecc;  Q_smv=stHOME_ecc & S_smv=s1_osm &  FWD : ddMOVETO_ecc;  Q_smv=stEND_ecc & S_smv=s1_osm &  BACK : ddRETURN_ecc;  Q_smv=ddMOVETO_ecc & S_smv=s1_osm  : stEND_ecc;  Q_smv=ddRETURN_ecc & S_smv=s1_osm  : stHOME_ecc;  Q_smv=ddRETURN_ecc & S_smv=s1_osm & !( FWD) &!( BACK) : stSTOP_ecc;  Q_smv=stSTOP_ecc & S_smv=s1_osm &  BACK : ddRETURN_ecc;  Q_smv=stSTOP_ecc & S_smv=s1_osm &  FWD : ddMOVETO_ecc;  Q_smv=ddMOVETO_ecc & S_smv=s1_osm & !( FWD) &!( BACK) : stSTOP_ecc;  Q_smv=INIT_ecc & S_smv=s1_osm  : stSTOP_ecc;  Q_smv=INIT_ecc & S_smv=s1_osm  : stEND_ecc;  TRUE : Q_smv; esac; next(S_smv):= case  alpha & S_smv=s0_osm & ExistsInputEvent: s1_osm;  S_smv=s1_osm & ExistsEnabledECTran: s2_osm;  S_smv=s2_osm & NA=0 : s1_osm;  S_smv=s1_osm & (!ExistsEnabledECTran): s0_osm;  TRUE : S_smv; esac;  next(NA):= case  S_smv=s1_osm: 1;  S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1 ) | (Q_smv=INIT_ecc & NA < 1 ) | (Q_smv=stHOME_ecc & NA < 1 ) | (Q_smv=stEND_ecc & NA < 1 ) | (Q_smv=ddMOVETO_ecc & NA < 1 ) | (Q_smv=ddRETURN_ecc & NA < 1 ) | (Q_smv=stSTOP_ecc & NA < 1 )) : (NA + 1) mod 2;  S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=stHOME_ecc & NA = 1) | (Q_smv=stEND_ecc & NA = 1) | (Q_smv=ddMOVETO_ecc & NA = 1) | (Q_smv=ddRETURN_ecc & NA = 1) | (Q_smv=stSTOP_ecc & NA = 1)) :  0 ;  TRUE : NA; esac; next(NI):= case  S_smv=s1_osm: 1;  S_smv=s2_osm &  ((Q_smv=START_ecc & NA = 1  & NI < 2 ) | (Q_smv=INIT_ecc & NA = 1  & NI < 2 ) | (Q_smv=stHOME_ecc & NA = 1  & NI < 2 ) | (Q_smv=stEND_ecc & NA = 1  & NI < 2 ) | (Q_smv=ddMOVETO_ecc & NA = 1  & NI < 2 ) | (Q_smv=ddRETURN_ecc & NA = 1  & NI < 2 ) | (Q_smv=stSTOP_ecc & NA = 1  & NI < 2 )) : (NI + 1) mod 3;  S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 2) | (Q_smv=INIT_ecc & NA = 1 & NI = 2) | (Q_smv=stHOME_ecc & NA = 1 & NI = 2) | (Q_smv=stEND_ecc & NA = 1 & NI = 2) | (Q_smv=ddMOVETO_ecc & NA = 1 & NI = 2) | (Q_smv=ddRETURN_ecc & NA = 1 & NI = 2) | (Q_smv=stSTOP_ecc & NA = 1 & NI = 2)) :  0 ; TRUE : NI; esac; next(FWD) := case  alpha & S_smv=s0_osm & (event_INIT | event_REQ) : FWD_ ;  TRUE : FWD; esac;  next(BACK) := case  alpha & S_smv=s0_osm & (event_INIT | event_REQ) : BACK_ ;  TRUE : BACK; esac;  next(HOME) := case  S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=0 : (TRUE);  S_smv=s2_osm & Q_smv=stHOME_ecc & NA=1 & NI=0 : (TRUE);  S_smv=s2_osm & Q_smv=stEND_ecc & NA=1 & NI=0 : (FALSE);  S_smv=s2_osm & Q_smv=ddMOVETO_ecc & NA=1 & NI=0 : (FALSE);  S_smv=s2_osm & Q_smv=ddRETURN_ecc & NA=1 & NI=0 : (FALSE);  S_smv=s2_osm & Q_smv=stSTOP_ecc & NA=1 & NI=0 : (FALSE);  TRUE : HOME; esac; next(END) := case  S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=1 : (FALSE);  S_smv=s2_osm & Q_smv=stHOME_ecc & NA=1 & NI=1 : (FALSE);  S_smv=s2_osm & Q_smv=stEND_ecc & NA=1 & NI=1 : (TRUE);  S_smv=s2_osm & Q_smv=ddMOVETO_ecc & NA=1 & NI=1 : (FALSE);  S_smv=s2_osm & Q_smv=ddRETURN_ecc & NA=1 & NI=1 : (FALSE);  S_smv=s2_osm & Q_smv=stSTOP_ecc & NA=1 & NI=1 : (FALSE);  TRUE : END; esac;  next(HOME_) := case S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=stHOME_ecc & NA=1) | (Q_smv=stEND_ecc & NA=1) | (Q_smv=ddMOVETO_ecc & NA=1) | (Q_smv=ddRETURN_ecc & NA=1) | (Q_smv=stSTOP_ecc & NA=1)) : HOME;  TRUE : HOME_; esac; next(END_) := case S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=stHOME_ecc & NA=1) | (Q_smv=stEND_ecc & NA=1) | (Q_smv=ddMOVETO_ecc & NA=1) | (Q_smv=ddRETURN_ecc & NA=1) | (Q_smv=stSTOP_ecc & NA=1)) : END;  TRUE : END_; esac;  DEFINE alpha_reset:=  (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran)); DEFINE beta_set:=  (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));  DEFINE event_INIT_reset:= (S_smv=s1_osm); DEFINE event_REQ_reset:= (alpha & ( event_INIT )) | (S_smv=s1_osm);  DEFINE event_INITO_set:= S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA = 1)) ; DEFINE event_CHG_set:= S_smv=s2_osm & NI=0 & ((Q_smv=stHOME_ecc & NA = 1) | (Q_smv=stEND_ecc & NA = 1) | (Q_smv=ddMOVETO_ecc & NA = 1) | (Q_smv=ddRETURN_ecc & NA = 1) | (Q_smv=stSTOP_ecc & NA = 1)) ;  DEFINE ExistsInputEvent:= event_INIT | event_REQ ; DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc   & (  ( event_INIT )  ) ) | (Q_smv=INIT_ecc  ) | (Q_smv=stHOME_ecc   & (  ( ( FWD)  )  ) ) | (Q_smv=stEND_ecc   & (  ( ( BACK)  )  ) ) | (Q_smv=ddMOVETO_ecc   & (  ( (!( FWD) &!( BACK))  )  ) ) | (Q_smv=ddRETURN_ecc   & (  ( (!( FWD) &!( BACK))  )  ) ) | (Q_smv=stSTOP_ecc   & (  ( ( BACK)  )  |  ( ( FWD)  )  ) ); FAIRNESS (alpha) FAIRNESS (beta) MODULE CylControl(event_INIT,event_REQ,event_INITO,event_CNF,Retracted_,Extended_,START_,EXTEND_,RETRACT_,alpha, beta) VAR Retracted : boolean; VAR Extended : boolean; VAR START : boolean; VAR EXTEND : boolean; VAR RETRACT : boolean; VAR S_smv : {s0_osm, s1_osm, s2_osm}; VAR Q_smv : {START_ecc,INIT_ecc,GO_ecc,S_RETURN_ecc,NOMOVE_ecc};  VAR NA: 0..1; VAR NI: 0..2;  ASSIGN init(Q_smv):= START_ecc; init(S_smv):= s0_osm; -- _moduleVariablesInitBlock init(Retracted):= FALSE; init(Extended):= FALSE; init(START):= FALSE; init(EXTEND):= FALSE; init(RETRACT):= FALSE; init(NA):= 0; init(NI):= 0;  next(Q_smv):= case  Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;  Q_smv=INIT_ecc & S_smv=s1_osm  : START_ecc;  Q_smv=START_ecc & S_smv=s1_osm & event_REQ&  START : GO_ecc;  Q_smv=GO_ecc & S_smv=s1_osm & event_REQ&  Extended : S_RETURN_ecc;  Q_smv=S_RETURN_ecc & S_smv=s1_osm & event_REQ&  Retracted : NOMOVE_ecc;  Q_smv=NOMOVE_ecc & S_smv=s1_osm  : START_ecc;  TRUE : Q_smv; esac; next(S_smv):= case  alpha & S_smv=s0_osm & ExistsInputEvent: s1_osm;  S_smv=s1_osm & ExistsEnabledECTran: s2_osm;  S_smv=s2_osm & NA=0 : s1_osm;  S_smv=s1_osm & (!ExistsEnabledECTran): s0_osm;  TRUE : S_smv; esac;  next(NA):= case  S_smv=s1_osm: 1;  S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1 ) | (Q_smv=INIT_ecc & NA < 1 ) | (Q_smv=GO_ecc & NA < 1 ) | (Q_smv=S_RETURN_ecc & NA < 1 ) | (Q_smv=NOMOVE_ecc & NA < 1 )) : (NA + 1) mod 2;  S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=GO_ecc & NA = 1) | (Q_smv=S_RETURN_ecc & NA = 1) | (Q_smv=NOMOVE_ecc & NA = 1)) :  0 ;  TRUE : NA; esac; next(NI):= case  S_smv=s1_osm: 1;  S_smv=s2_osm &  ((Q_smv=START_ecc & NA = 1  & NI < 2 ) | (Q_smv=INIT_ecc & NA = 1  & NI < 2 ) | (Q_smv=GO_ecc & NA = 1  & NI < 2 ) | (Q_smv=S_RETURN_ecc & NA = 1  & NI < 2 ) | (Q_smv=NOMOVE_ecc & NA = 1  & NI < 2 )) : (NI + 1) mod 3;  S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 2) | (Q_smv=INIT_ecc & NA = 1 & NI = 2) | (Q_smv=GO_ecc & NA = 1 & NI = 2) | (Q_smv=S_RETURN_ecc & NA = 1 & NI = 2) | (Q_smv=NOMOVE_ecc & NA = 1 & NI = 2)) :  0 ; TRUE : NI; esac; next(Retracted) := case  alpha & S_smv=s0_osm & (event_INIT | event_REQ) : Retracted_ ;  TRUE : Retracted; esac;  next(Extended) := case  alpha & S_smv=s0_osm & (event_INIT | event_REQ) : Extended_ ;  TRUE : Extended; esac;  next(START) := case  alpha & S_smv=s0_osm & (event_INIT | event_REQ) : START_ ;  TRUE : START; esac;  next(EXTEND) := case  S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=0 : (FALSE);  S_smv=s2_osm & Q_smv=GO_ecc & NA=1 & NI=0 : (TRUE);  S_smv=s2_osm & Q_smv=S_RETURN_ecc & NA=1 & NI=0 : (FALSE);  S_smv=s2_osm & Q_smv=NOMOVE_ecc & NA=1 & NI=0 : (FALSE);  TRUE : EXTEND; esac; next(RETRACT) := case  S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=1 : (FALSE);  S_smv=s2_osm & Q_smv=GO_ecc & NA=1 & NI=1 : (FALSE);  S_smv=s2_osm & Q_smv=S_RETURN_ecc & NA=1 & NI=1 : (TRUE);  S_smv=s2_osm & Q_smv=NOMOVE_ecc & NA=1 & NI=1 : (FALSE);  TRUE : RETRACT; esac;  next(EXTEND_) := case S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=GO_ecc & NA=1) | (Q_smv=S_RETURN_ecc & NA=1) | (Q_smv=NOMOVE_ecc & NA=1)) : EXTEND;  TRUE : EXTEND_; esac; next(RETRACT_) := case S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=GO_ecc & NA=1) | (Q_smv=S_RETURN_ecc & NA=1) | (Q_smv=NOMOVE_ecc & NA=1)) : RETRACT;  TRUE : RETRACT_; esac;  DEFINE alpha_reset:=  (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran)); DEFINE beta_set:=  (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));  DEFINE event_INIT_reset:= (S_smv=s1_osm); DEFINE event_REQ_reset:= (alpha & ( event_INIT )) | (S_smv=s1_osm);  DEFINE event_INITO_set:= S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA = 1)) ; DEFINE event_CNF_set:= S_smv=s2_osm & NI=0 & ((Q_smv=GO_ecc & NA = 1) | (Q_smv=S_RETURN_ecc & NA = 1) | (Q_smv=NOMOVE_ecc & NA = 1)) ;  DEFINE ExistsInputEvent:= event_INIT | event_REQ ; DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc   & (  ( event_INIT )  |  ( event_REQ & ( START)  )  ) ) | (Q_smv=INIT_ecc  ) | (Q_smv=GO_ecc   & (  ( event_REQ & ( Extended)  )  ) ) | (Q_smv=S_RETURN_ecc   & (  ( event_REQ & ( Retracted)  )  ) ) | (Q_smv=NOMOVE_ecc  ); FAIRNESS (alpha) FAIRNESS (beta)  MODULE TwoCylDiscr(event_INIT, event_INITO, alpha, beta) VAR  HorCTL  : CylControl (HorCTL_INIT,HorCTL_REQ,HorCTL_INITO, HorCTL_CNF, HorCyl_HOME, HorCyl_END, Button_Pressed, HorCTL_EXTEND, HorCTL_RETRACT, alpha, beta); VAR  VerCTL  : CylControl (VerCTL_INIT,VerCTL_REQ,VerCTL_INITO, VerCTL_CNF, HorCyl_HOME, HorCyl_END, Button_Pressed, VerCTL_EXTEND, VerCTL_RETRACT, alpha, beta); VAR  Button  : ButtonDs (Button_INIT,Button_REQ,Button_INITO, Button_CHG, Button_LightOn, Button_Pressed, alpha, beta); VAR  HorCyl  : LinearDA (HorCyl_INIT,HorCyl_REQ,HorCyl_INITO, HorCyl_CHG, HorCTL_EXTEND, HorCTL_RETRACT, HorCyl_HOME, HorCyl_END, alpha, beta); VAR  VerCyl  : LinearDA (VerCyl_INIT,VerCyl_REQ,VerCyl_INITO, VerCyl_CHG, HorCTL_EXTEND, HorCTL_RETRACT, VerCyl_HOME, VerCyl_END, alpha, beta);   -- generateCompositeFBsVariables  VAR HorCTL_INIT : boolean; VAR HorCTL_REQ : boolean; VAR HorCTL_INITO : boolean; VAR HorCTL_CNF : boolean; VAR HorCTL_EXTEND : boolean; VAR HorCTL_RETRACT : boolean; VAR HorCTL_alpha : boolean; VAR HorCTL_beta : boolean;  VAR VerCTL_INIT : boolean; VAR VerCTL_REQ : boolean; VAR VerCTL_INITO : boolean; VAR VerCTL_CNF : boolean; VAR VerCTL_EXTEND : boolean; VAR VerCTL_RETRACT : boolean; VAR VerCTL_alpha : boolean; VAR VerCTL_beta : boolean;  VAR Button_INIT : boolean; VAR Button_REQ : boolean; VAR Button_INITO : boolean; VAR Button_CHG : boolean; VAR Button_LightOn : boolean; VAR Button_Pressed : boolean; VAR Button_alpha : boolean; VAR Button_beta : boolean;  VAR HorCyl_INIT : boolean; VAR HorCyl_REQ : boolean; VAR HorCyl_INITO : boolean; VAR HorCyl_CHG : boolean; VAR HorCyl_HOME : boolean; VAR HorCyl_END : boolean; VAR HorCyl_alpha : boolean; VAR HorCyl_beta : boolean;  VAR VerCyl_INIT : boolean; VAR VerCyl_REQ : boolean; VAR VerCyl_INITO : boolean; VAR VerCyl_CHG : boolean; VAR VerCyl_HOME : boolean; VAR VerCyl_END : boolean; VAR VerCyl_alpha : boolean; VAR VerCyl_beta : boolean;    ASSIGN init(HorCTL_INIT) := FALSE; init(HorCTL_REQ) := FALSE; init(HorCTL_INITO) := FALSE; init(HorCTL_CNF) := FALSE; init(HorCTL_EXTEND) := FALSE; init(HorCTL_RETRACT) := FALSE; init( HorCTL_alpha) := FALSE; init( HorCTL_beta) := FALSE;  init(VerCTL_INIT) := FALSE; init(VerCTL_REQ) := FALSE; init(VerCTL_INITO) := FALSE; init(VerCTL_CNF) := FALSE; init(VerCTL_EXTEND) := FALSE; init(VerCTL_RETRACT) := FALSE; init( VerCTL_alpha) := FALSE; init( VerCTL_beta) := FALSE;  init(Button_INIT) := FALSE; init(Button_REQ) := FALSE; init(Button_INITO) := FALSE; init(Button_CHG) := FALSE; init(Button_LightOn) := FALSE; init(Button_Pressed) := FALSE; init( Button_alpha) := FALSE; init( Button_beta) := FALSE;  init(HorCyl_INIT) := FALSE; init(HorCyl_REQ) := FALSE; init(HorCyl_INITO) := FALSE; init(HorCyl_CHG) := FALSE; init(HorCyl_HOME) := FALSE; init(HorCyl_END) := FALSE; init( HorCyl_alpha) := FALSE; init( HorCyl_beta) := FALSE;  init(VerCyl_INIT) := FALSE; init(VerCyl_REQ) := FALSE; init(VerCyl_INITO) := FALSE; init(VerCyl_CHG) := FALSE; init(VerCyl_HOME) := FALSE; init(VerCyl_END) := FALSE; init( VerCyl_alpha) := FALSE; init( VerCyl_beta) := FALSE;    -- generateInternalDataConnections   -- generateInnerFBsEventOutputsUpdate  next(Button_INITO) := case  Button.event_INITO_set : TRUE;  TRUE : FALSE; esac; next(HorCyl_INITO) := case  HorCyl.event_INITO_set : TRUE;  TRUE : FALSE; esac; next(VerCyl_INITO) := case  VerCyl.event_INITO_set : TRUE;  TRUE : FALSE; esac; next(HorCTL_CNF) := case  HorCTL.event_CNF_set : TRUE;  TRUE : FALSE; esac; next(HorCyl_CHG) := case  HorCyl.event_CHG_set : TRUE;  TRUE : FALSE; esac; next(VerCyl_CHG) := case  VerCyl.event_CHG_set : TRUE;  TRUE : FALSE; esac; next(HorCTL_INITO) := case  HorCTL.event_INITO_set : TRUE;  TRUE : FALSE; esac; next(VerCTL_CNF) := case  VerCTL.event_CNF_set : TRUE;  TRUE : FALSE; esac; next(Button_CHG) := case  Button.event_CHG_set : TRUE;  TRUE : FALSE; esac; next(VerCTL_INITO) := case  VerCTL.event_INITO_set : TRUE;  TRUE : FALSE; esac;  -- DISPATCHER  next(HorCTL_alpha):= case  alpha & omega & !ExistsInputEvent : TRUE;  HorCTL.alpha_reset : FALSE;  TRUE : HorCTL_alpha; esac; next(HorCTL_beta):= case  beta & omega & !ExistsInputEvent : TRUE;  HorCTL.beta_set : FALSE;  TRUE : HorCTL_beta; esac; next(VerCTL_alpha):= case  alpha & omega & !ExistsInputEvent : TRUE;  VerCTL.alpha_reset : FALSE;  TRUE : VerCTL_alpha; esac; next(VerCTL_beta):= case  beta & omega & !ExistsInputEvent : TRUE;  VerCTL.beta_set : FALSE;  TRUE : VerCTL_beta; esac; next(Button_alpha):= case  alpha & omega & !ExistsInputEvent : TRUE;  Button.alpha_reset : FALSE;  TRUE : Button_alpha; esac; next(Button_beta):= case  beta & omega & !ExistsInputEvent : TRUE;  Button.beta_set : FALSE;  TRUE : Button_beta; esac; next(HorCyl_alpha):= case  alpha & omega & !ExistsInputEvent : TRUE;  HorCyl.alpha_reset : FALSE;  TRUE : HorCyl_alpha; esac; next(HorCyl_beta):= case  beta & omega & !ExistsInputEvent : TRUE;  HorCyl.beta_set : FALSE;  TRUE : HorCyl_beta; esac; next(VerCyl_alpha):= case  alpha & omega & !ExistsInputEvent : TRUE;  VerCyl.alpha_reset : FALSE;  TRUE : VerCyl_alpha; esac; next(VerCyl_beta):= case  beta & omega & !ExistsInputEvent : TRUE;  VerCyl.beta_set : FALSE;  TRUE : VerCyl_beta; esac; DEFINE beta_set:= VerCyl_beta & omega; DEFINE alpha_reset:= alpha & omega & !ExistsInputEvent;  ASSIGN  -- generateInternalEventConnections  next(HorCyl_INIT):= case  (Button_INITO) : TRUE;  (HorCyl.event_INIT_reset) : FALSE;  TRUE : HorCyl_INIT; esac;  next(VerCyl_INIT):= case  (HorCyl_INITO) : TRUE;  (VerCyl.event_INIT_reset) : FALSE;  TRUE : VerCyl_INIT; esac;  next(HorCTL_INIT):= case  (VerCyl_INITO) : TRUE;  (HorCTL.event_INIT_reset) : FALSE;  TRUE : HorCTL_INIT; esac;  next(HorCTL_REQ):= case  (HorCyl_CHG | Button_CHG) : TRUE;  (HorCTL.event_REQ_reset) : FALSE;  TRUE : HorCTL_REQ; esac;  next(VerCTL_REQ):= case  (VerCyl_CHG | Button_CHG) : TRUE;  (VerCTL.event_REQ_reset) : FALSE;  TRUE : VerCTL_REQ; esac;  next(Button_REQ):= case  (VerCTL_INITO) : TRUE;  (Button.event_REQ_reset) : FALSE;  TRUE : Button_REQ; esac;  next(VerCyl_REQ):= case  (VerCTL_CNF) : TRUE;  (VerCyl.event_REQ_reset) : FALSE;  TRUE : VerCyl_REQ; esac;  next(VerCTL_INIT):= case  (HorCTL_INITO) : TRUE;  (VerCTL.event_INIT_reset) : FALSE;  TRUE : VerCTL_INIT; esac;  next(Button_INIT):= case  ((event_INIT & alpha)) : TRUE;  (Button.event_INIT_reset) : FALSE;  TRUE : Button_INIT; esac;  next(HorCyl_REQ):= case  (HorCTL_CNF) : TRUE;  (HorCyl.event_REQ_reset) : FALSE;  TRUE : HorCyl_REQ; esac;  DEFINE event_INITO_set:= (VerCTL_INITO ); DEFINE event_INIT_reset:= alpha; DEFINE ExistsInputEvent :=  event_INIT ;  DEFINE omega:= !(HorCyl_CHG | HorCyl_INITO | HorCTL_INITO | HorCTL_CNF | VerCyl_CHG | VerCTL_CNF | Button_INITO | VerCTL_INITO | VerCyl_INITO | Button_CHG);  DEFINE phi:= (!ExistsInputEvent) & (!(HorCyl_INIT | VerCyl_INIT | HorCTL_INIT | HorCTL_REQ | VerCTL_REQ | Button_REQ | VerCyl_REQ | VerCTL_INIT | Button_INIT | HorCyl_REQ | HorCyl_CHG | HorCyl_INITO | HorCTL_INITO | HorCTL_CNF | VerCyl_CHG | VerCTL_CNF | Button_INITO | VerCTL_INITO | VerCyl_INITO | Button_CHG )); FAIRNESS (alpha) FAIRNESS (beta)   MODULE main() VAR TwoCylDiscr_inst : TwoCylDiscr (TwoCylDiscr_inst_INIT, TwoCylDiscr_inst_INITO,  TwoCylDiscr_inst_alpha, TwoCylDiscr_inst_beta);  VAR TwoCylDiscr_inst_INIT : boolean; VAR TwoCylDiscr_inst_INITO : boolean; VAR TwoCylDiscr_inst_alpha : boolean; VAR TwoCylDiscr_inst_beta : boolean; VAR false_var : boolean;  ASSIGN init(false_var):= FALSE; next(false_var):= FALSE; init (TwoCylDiscr_inst_INIT) := TRUE; init (TwoCylDiscr_inst_INITO) := TRUE; init(TwoCylDiscr_inst_alpha):= TRUE; init(TwoCylDiscr_inst_beta):= FALSE;  next(TwoCylDiscr_inst_INIT):= case TwoCylDiscr_inst.event_INIT_reset : FALSE;  TRUE : TwoCylDiscr_inst_INIT; esac; next(TwoCylDiscr_inst_INITO):= case TwoCylDiscr_inst.event_INITO_set : TRUE;  TRUE : TwoCylDiscr_inst_INITO; esac; next(TwoCylDiscr_inst_alpha):= case  TwoCylDiscr_inst_beta : TRUE;  TwoCylDiscr_inst.alpha_reset : FALSE;  TRUE : TwoCylDiscr_inst_alpha; esac; next(TwoCylDiscr_inst_beta):= case  TwoCylDiscr_inst_beta : FALSE;  TwoCylDiscr_inst.beta_set : TRUE;  TRUE : TwoCylDiscr_inst_beta; esac;  LTLSPEC F false_var=TRUE