Comparing files TwoCylDiscr_ref.smv and TWOCYLDISCRTWOCYLDISCR.SMV
***** TwoCylDiscr_ref.smv
MODULE CylControl(event_INIT, event_REQ, event_INITO, event_CNF, Retracted_, Extended_, START_, EXTEND_, RETRACT_, alpha, beta)
VAR Retracted : boolean;
***** TWOCYLDISCRTWOCYLDISCR.SMV
MODULE CylControl(event_INIT,event_REQ,event_INITO,event_CNF,Retracted_,Extended_,START_,EXTEND_,RETRACT_,alpha, beta)
VAR Retracted : boolean;
*****

***** TwoCylDiscr_ref.smv
VAR S_smv : {s0_osm, s1_osm, s2_osm};
VAR Q_smv : {START_ecc, INIT_ecc, GO_ecc, S_RETURN_ecc, NOMOVE_ecc};

***** TWOCYLDISCRTWOCYLDISCR.SMV
VAR S_smv : {s0_osm, s1_osm, s2_osm};
VAR Q_smv : {START_ecc,INIT_ecc,GO_ecc,S_RETURN_ecc,NOMOVE_ecc}

*****

***** TwoCylDiscr_ref.smv
init(RETRACT):= FALSE;

init(NA):= 0;
***** TWOCYLDISCRTWOCYLDISCR.SMV
init(RETRACT):= FALSE;
init(NA):= 0;
*****

***** TwoCylDiscr_ref.smv
        Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;
        Q_smv=INIT_ecc & S_smv=s1_osm : START_ecc;
        Q_smv=START_ecc & S_smv=s1_osm & event_REQ[START] : GO_ecc;
        Q_smv=GO_ecc & S_smv=s1_osm & event_REQ  &  Extended : S_RETURN_ecc;
        Q_smv=S_RETURN_ecc & S_smv=s1_osm & event_REQ  &  Retracted : NOMOVE_ecc;
        Q_smv=NOMOVE_ecc & S_smv=s1_osm : START_ecc;
        TRUE : Q_smv;
***** TWOCYLDISCRTWOCYLDISCR.SMV
        Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;
        Q_smv=INIT_ecc & S_smv=s1_osm  : START_ecc;
        Q_smv=START_ecc & S_smv=s1_osm & event_REQ&  START : GO_ecc;
        Q_smv=GO_ecc & S_smv=s1_osm & event_REQ&  Extended : S_RETURN_ecc;
        Q_smv=S_RETURN_ecc & S_smv=s1_osm & event_REQ&  Retracted : NOMOVE_ecc;
        Q_smv=NOMOVE_ecc & S_smv=s1_osm  : START_ecc;
        Q_smv=S_RETURN_ecc & S_smv=s1_osm  : S_RETURN_ecc;
        TRUE : Q_smv;
*****

***** TwoCylDiscr_ref.smv
esac;

next(S_smv):= case
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(S_smv):= case
*****

***** TwoCylDiscr_ref.smv
        S_smv=s1_osm: 1;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1) | (Q_smv=INIT_ecc & NA < 1) | (Q_smv=GO_ecc & NA < 1) | (Q_smv=S_RETU
RN_ecc & NA < 1) | (Q_smv=NOMOVE_ecc & NA < 1)): (NA + 1) mod 2;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=GO_ecc & NA = 1) | (Q_smv=S_RETU
RN_ecc & NA = 1) | (Q_smv=NOMOVE_ecc & NA = 1)):  0 ;
        TRUE : NA;
***** TWOCYLDISCRTWOCYLDISCR.SMV
        S_smv=s1_osm: 1;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1 ) | (Q_smv=INIT_ecc & NA < 1 ) | (Q_smv=GO_ecc & NA < 1 ) | (Q_smv=S_R
ETURN_ecc & NA < 1 ) | (Q_smv=NOMOVE_ecc & NA < 1 )) : (NA + 1) mod 2;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=GO_ecc & NA = 1) | (Q_smv=S_RETU
RN_ecc & NA = 1) | (Q_smv=NOMOVE_ecc & NA = 1)) :  0 ;
        TRUE : NA;
*****

***** TwoCylDiscr_ref.smv
esac;

next(NI):= case
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(NI):= case
*****

***** TwoCylDiscr_ref.smv
        S_smv=s1_osm: 1;
        S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI < 1) | (Q_smv=INIT_ecc & NA = 1 & NI < 2) | (Q_smv=GO_ecc & NA = 1 & NI 
< 2) | (Q_smv=S_RETURN_ecc & NA = 1 & NI < 2) | (Q_smv=NOMOVE_ecc & NA = 1 & NI < 2)):(NI + 1) mod 3;
        S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 1) | (Q_smv=INIT_ecc & NA = 1 & NI = 2) | (Q_smv=GO_ecc & NA = 1 & NI 
= 2) | (Q_smv=S_RETURN_ecc & NA = 1 & NI = 2) | (Q_smv=NOMOVE_ecc & NA = 1 & NI = 2)): 0 ;
        TRUE : NI;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV
        S_smv=s1_osm: 1;
        S_smv=s2_osm &  ((Q_smv=START_ecc & NA = 1  & 2 < 1) | (Q_smv=INIT_ecc & NA = 1  & 2 < 1) | (Q_smv=GO_ecc & NA = 1  & 2
 < 1) | (Q_smv=S_RETURN_ecc & NA = 1  & 2 < 1) | (Q_smv=NOMOVE_ecc & NA = 1  & 2 < 1)) : (NI + 1) mod 3;
        S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 2) | (Q_smv=INIT_ecc & NA = 1 & NI = 2) | (Q_smv=GO_ecc & NA = 1 & NI 
= 2) | (Q_smv=S_RETURN_ecc & NA = 1 & NI = 2) | (Q_smv=NOMOVE_ecc & NA = 1 & NI = 2)) :  0 ;    TRUE : NI;
esac;
next(Retracted) := case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : Retracted_ ;
        TRUE : Retracted
esac;
*****

***** TwoCylDiscr_ref.smv

next(Retracted):= case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ) : Retracted_ ;
        TRUE : Retracted;
esac;
next(Extended):= case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ) : Extended_ ;
        TRUE : Extended;
esac;
next(START):= case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ) : START_ ;
        TRUE : START;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(Extended) := case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : Extended_ ;
        TRUE : Extended
esac;
*****

***** TwoCylDiscr_ref.smv

next(EXTEND):= case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=1 : (FALSE);
        S_smv=s2_osm & Q_smv=GO_ecc & NA=1 & NI=1 : (TRUE);
        S_smv=s2_osm & Q_smv=S_RETURN_ecc & NA=1 & NI=1 : (FALSE);
        S_smv=s2_osm & Q_smv=NOMOVE_ecc & NA=1 & NI=1 : (FALSE);
        TRUE : EXTEND;
esac;
next(RETRACT):= case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=2 : (FALSE);
        S_smv=s2_osm & Q_smv=GO_ecc & NA=1 & NI=2 : (FALSE);
        S_smv=s2_osm & Q_smv=S_RETURN_ecc & NA=1 & NI=2 : (TRUE);
        S_smv=s2_osm & Q_smv=NOMOVE_ecc & NA=1 & NI=2 : (FALSE);
        TRUE : RETRACT;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(START) := case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : START_ ;
        TRUE : START
esac;
*****

***** TwoCylDiscr_ref.smv

next(EXTEND_):= case
S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA=1) | (Q_smv=GO_ecc & NA=1) | (Q_smv=S_RETURN_ecc & NA=1) | (Q_smv=NOMOVE_ecc & NA=1
)) : EXTEND;
        TRUE : EXTEND_;
esac;
next(RETRACT_):= case
S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA=1) | (Q_smv=GO_ecc & NA=1) | (Q_smv=S_RETURN_ecc & NA=1) | (Q_smv=NOMOVE_ecc & NA=1
)) : RETRACT;
        TRUE : RETRACT_;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(EXTEND) := case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=0 : (FALSE);
        S_smv=s2_osm & Q_smv=GO_ecc & NA=1 & NI=0 : (TRUE);
        S_smv=s2_osm & Q_smv=S_RETURN_ecc & NA=1 & NI=0 : (FALSE);
        S_smv=s2_osm & Q_smv=NOMOVE_ecc & NA=1 & NI=0 : (FALSE);
        TRUE : EXTEND
esac;
next(RETRACT) := case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=1 : (FALSE);
        S_smv=s2_osm & Q_smv=GO_ecc & NA=1 & NI=1 : (FALSE);
        S_smv=s2_osm & Q_smv=S_RETURN_ecc & NA=1 & NI=1 : (TRUE);
        S_smv=s2_osm & Q_smv=NOMOVE_ecc & NA=1 & NI=1 : (FALSE);
        TRUE : RETRACT
esac;
*****

***** TwoCylDiscr_ref.smv

DEFINE alpha_reset:=    (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(EXTEND_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=GO_ecc & NA=1) | (Q_smv=S_RETURN_ecc & NA=1)
 | (Q_smv=NOMOVE_ecc & NA=1)) : EXTEND;
        TRUE : EXTEND_;
esac;
next(RETRACT_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=GO_ecc & NA=1) | (Q_smv=S_RETURN_ecc & NA=1)
 | (Q_smv=NOMOVE_ecc & NA=1)) : RETRACT;
        TRUE : RETRACT_;
esac;

DEFINE alpha_reset:=    (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));
*****

***** TwoCylDiscr_ref.smv

DEFINE event_INIT_reset:=       S_smv=s1_osm;
DEFINE event_REQ_reset:=        (alpha & (event_INIT)) | (S_smv=s1_osm);

DEFINE event_INITO_set:=        S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA=1));
DEFINE event_CNF_set:=  S_smv=s2_osm & NI=0 & ((Q_smv=GO_ecc & NA=1) | (Q_smv=S_RETURN_ecc & NA=1) | (Q_smv=NOMOVE_ecc & NA=1))
;

DEFINE ExistsInputEvent:= event_INIT | event_REQ;
DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc  & ((event_INIT) | (event_REQ[START]))) | (Q_smv=INIT_ecc) | (Q_smv=GO_ecc  & ((e
vent_REQ  &  Extended))) | (Q_smv=S_RETURN_ecc  & ((event_REQ  &  Retracted))) | (Q_smv=NOMOVE_ecc);


FAIRNESS (alpha)
***** TWOCYLDISCRTWOCYLDISCR.SMV

DEFINE event_INIT_reset:= (S_smv=s1_osm);
DEFINE event_REQ_reset:= (alpha & ( INIT )) | (S_smv=s1_osm);

DEFINE event_INITO_set:=        S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA = 1)) ;
DEFINE event_CNF_set:=  S_smv=s2_osm & NI=0 & ((Q_smv=GO_ecc & NA = 1) | (Q_smv=S_RETURN_ecc & NA = 1) | (Q_smv=NOMOVE_ecc & NA
 = 1)) ;

DEFINE ExistsInputEvent:= event_INIT | event_REQ |;
;
DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc  & ( event_INIT& ( event_REQ& ( START)  | (Q_smv=INIT_ecc   | (Q_smv=GO_ecc  & ( 
event_REQ& ( Extended)  | (Q_smv=S_RETURN_ecc  & ( event_REQ& ( Retracted)  | (Q_smv=NOMOVE_ecc  
FAIRNESS (alpha)
*****

***** TwoCylDiscr_ref.smv

MODULE ButtonDs(event_INIT, event_REQ, event_INITO, event_CHG, LightOn_, Pressed_, alpha, beta)
VAR LightOn : boolean;
***** TWOCYLDISCRTWOCYLDISCR.SMV

MODULE ButtonDs(event_INIT,event_REQ,event_NDT,event_INITO,event_CHG,LightOn_,Pressed_,alpha, beta)
VAR LightOn : boolean;
*****

***** TwoCylDiscr_ref.smv
VAR S_smv : {s0_osm, s1_osm, s2_osm};
VAR Q_smv : {START_ecc, INIT_ecc, OFF_ecc, PRESSED_ecc};

***** TWOCYLDISCRTWOCYLDISCR.SMV
VAR S_smv : {s0_osm, s1_osm, s2_osm};
VAR Q_smv : {START_ecc,INIT_ecc,OFF_ecc,PRESSED_ecc}

*****

***** TwoCylDiscr_ref.smv
VAR NI: 0..1;
VAR NDT : boolean;

***** TWOCYLDISCRTWOCYLDISCR.SMV
VAR NI: 0..1;

*****

***** TwoCylDiscr_ref.smv
init(Pressed):= FALSE;

init(NA):= 0;
***** TWOCYLDISCRTWOCYLDISCR.SMV
init(Pressed):= FALSE;
init(NA):= 0;
*****

***** TwoCylDiscr_ref.smv
init(NI):= 0;
-- _NonDeterministicVariableInitBlock
init(NDT):= { TRUE , FALSE };

next(NDT):= case
        TRUE : NDT;
esac;


***** TWOCYLDISCRTWOCYLDISCR.SMV
init(NI):= 0;

*****

***** TwoCylDiscr_ref.smv
esac;

next(S_smv):= case
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(S_smv):= case
*****

***** TwoCylDiscr_ref.smv
        S_smv=s1_osm: 1;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1) | (Q_smv=INIT_ecc & NA < 1) | (Q_smv=OFF_ecc & NA < 1) | (Q_smv=PRESS
ED_ecc & NA < 1)): (NA + 1) mod 2;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=OFF_ecc & NA = 1) | (Q_smv=PRESS
ED_ecc & NA = 1)):  0 ;
        TRUE : NA;
***** TWOCYLDISCRTWOCYLDISCR.SMV
        S_smv=s1_osm: 1;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1 ) | (Q_smv=INIT_ecc & NA < 1 ) | (Q_smv=OFF_ecc & NA < 1 ) | (Q_smv=PR
ESSED_ecc & NA < 1 )) : (NA + 1) mod 2;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=OFF_ecc & NA = 1) | (Q_smv=PRESS
ED_ecc & NA = 1)) :  0 ;
        TRUE : NA;
*****

***** TwoCylDiscr_ref.smv
esac;

next(NI):= case
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(NI):= case
*****

***** TwoCylDiscr_ref.smv
        S_smv=s1_osm: 1;
        S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI < 1) | (Q_smv=INIT_ecc & NA = 1 & NI < 1) | (Q_smv=OFF_ecc & NA = 1 & NI
 < 1) | (Q_smv=PRESSED_ecc & NA = 1 & NI < 1)):(NI + 1) mod 2;
        S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 1) | (Q_smv=INIT_ecc & NA = 1 & NI = 1) | (Q_smv=OFF_ecc & NA = 1 & NI
 = 1) | (Q_smv=PRESSED_ecc & NA = 1 & NI = 1)): 0 ;
        TRUE : NI;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV
        S_smv=s1_osm: 1;
        S_smv=s2_osm &  ((Q_smv=START_ecc & NA = 1  & 1 < 1) | (Q_smv=INIT_ecc & NA = 1  & 1 < 1) | (Q_smv=OFF_ecc & NA = 1  & 
1 < 1) | (Q_smv=PRESSED_ecc & NA = 1  & 1 < 1)) : (NI + 1) mod 2;
        S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 1) | (Q_smv=INIT_ecc & NA = 1 & NI = 1) | (Q_smv=OFF_ecc & NA = 1 & NI
 = 1) | (Q_smv=PRESSED_ecc & NA = 1 & NI = 1)) :  0 ;   TRUE : NI;
esac;
next(LightOn) := case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : LightOn_ ;
        TRUE : LightOn
esac;
*****

***** TwoCylDiscr_ref.smv

next(LightOn):= case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ) : LightOn_ ;
        TRUE : LightOn;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(Pressed) := case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=0 : (FALSE);
        S_smv=s2_osm & Q_smv=OFF_ecc & NA=1 & NI=0 : (TRUE);
        S_smv=s2_osm & Q_smv=PRESSED_ecc & NA=1 & NI=0 : (TRUE);
        TRUE : Pressed
esac;
*****

***** TwoCylDiscr_ref.smv

next(Pressed):= case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=1 : (FALSE);
        S_smv=s2_osm & Q_smv=OFF_ecc & NA=1 & NI=1 : (TRUE);
        S_smv=s2_osm & Q_smv=PRESSED_ecc & NA=1 & NI=1 : (TRUE);
        TRUE : Pressed;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(Pressed_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=OFF_ecc & NA=1) | (Q_smv=PRESSED_ecc & NA=1)
) : Pressed;
        TRUE : Pressed_;
esac;
*****

***** TwoCylDiscr_ref.smv

next(Pressed_):= case
S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA=1) | (Q_smv=OFF_ecc & NA=1) | (Q_smv=PRESSED_ecc & NA=1)) : Pressed;
        TRUE : Pressed_;
esac;

DEFINE alpha_reset:=    (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));
***** TWOCYLDISCRTWOCYLDISCR.SMV

DEFINE alpha_reset:=    (alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));
*****

***** TwoCylDiscr_ref.smv

DEFINE event_INIT_reset:=       S_smv=s1_osm;
DEFINE event_REQ_reset:=        (alpha & (event_INIT)) | (S_smv=s1_osm);

DEFINE event_INITO_set:=        S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA=1));
DEFINE event_CHG_set:=  S_smv=s2_osm & NI=0 & ((Q_smv=OFF_ecc & NA=1) | (Q_smv=PRESSED_ecc & NA=1));

DEFINE ExistsInputEvent:= event_INIT | event_REQ | NDT;
DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc  & ((event_INIT))) | (Q_smv=INIT_ecc  & ((event_REQ)));


FAIRNESS (alpha)
***** TWOCYLDISCRTWOCYLDISCR.SMV

DEFINE event_INIT_reset:= (S_smv=s1_osm);
DEFINE event_REQ_reset:= (alpha & ( INIT )) | (S_smv=s1_osm);
DEFINE event_NDT_reset:= (alpha & ( INIT | REQ )) | (S_smv=s1_osm);

DEFINE event_INITO_set:=        S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA = 1)) ;
DEFINE event_CHG_set:=  S_smv=s2_osm & NI=0 & ((Q_smv=OFF_ecc & NA = 1) | (Q_smv=PRESSED_ecc & NA = 1)) ;

DEFINE ExistsInputEvent:= event_INIT | event_REQ | event_NDT |;
;
DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc  & ( event_INIT | (Q_smv=INIT_ecc  & ( event_REQ | (Q_smv=OFF_ecc   | (Q_smv=PRES
SED_ecc  
FAIRNESS (alpha)
*****

***** TwoCylDiscr_ref.smv

MODULE LinearDA(event_INIT, event_REQ, event_INITO, event_CHG, FWD_, BACK_, HOME_, END_, alpha, beta)
VAR FWD : boolean;
***** TWOCYLDISCRTWOCYLDISCR.SMV

MODULE LinearDA(event_INIT,event_REQ,event_NDT,event_INITO,event_CHG,FWD_,BACK_,HOME_,END_,alpha, beta)
VAR FWD : boolean;
*****

***** TwoCylDiscr_ref.smv
VAR S_smv : {s0_osm, s1_osm, s2_osm};
VAR Q_smv : {START_ecc, INIT_ecc, stHOME_ecc, stEND_ecc, ddMOVETO_ecc, ddRETURN_ecc, stSTOP_ecc};

***** TWOCYLDISCRTWOCYLDISCR.SMV
VAR S_smv : {s0_osm, s1_osm, s2_osm};
VAR Q_smv : {START_ecc,INIT_ecc,stHOME_ecc,stEND_ecc,ddMOVETO_ecc,ddRETURN_ecc,stSTOP_ecc}

*****

***** TwoCylDiscr_ref.smv
VAR NI: 0..2;
VAR NDT : boolean;

***** TWOCYLDISCRTWOCYLDISCR.SMV
VAR NI: 0..2;

*****

***** TwoCylDiscr_ref.smv
init(END):= FALSE;

init(NA):= 0;
***** TWOCYLDISCRTWOCYLDISCR.SMV
init(END):= FALSE;
init(NA):= 0;
*****

***** TwoCylDiscr_ref.smv
init(NI):= 0;
-- _NonDeterministicVariableInitBlock
init(NDT):= { TRUE , FALSE };

next(NDT):= case
        Q_smv=INIT_ecc & S_smv=s1_osm : {TRUE,FALSE};
        Q_smv=ddMOVETO_ecc & S_smv=s1_osm : {TRUE,FALSE};
        Q_smv=ddRETURN_ecc & S_smv=s1_osm : {TRUE,FALSE};
        Q_smv=INIT_ecc & S_smv=s1_osm : {TRUE,FALSE};
        Q_smv=INIT_ecc & S_smv=s1_osm : {TRUE,FALSE};
        TRUE : NDT;
esac;


***** TWOCYLDISCRTWOCYLDISCR.SMV
init(NI):= 0;

*****

***** TwoCylDiscr_ref.smv
        Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;
        Q_smv=INIT_ecc & S_smv=s1_osm & NDT : stHOME_ecc;
        Q_smv=stHOME_ecc & S_smv=s1_osm & FWD : ddMOVETO_ecc;
        Q_smv=stEND_ecc & S_smv=s1_osm & BACK : ddRETURN_ecc;
        Q_smv=ddMOVETO_ecc & S_smv=s1_osm & NDT : stEND_ecc;
        Q_smv=ddRETURN_ecc & S_smv=s1_osm & NDT : stHOME_ecc;
        Q_smv=ddRETURN_ecc & S_smv=s1_osm &  ! FWD   &    ! BACK : stSTOP_ecc;
        Q_smv=stSTOP_ecc & S_smv=s1_osm & BACK : ddRETURN_ecc;
        Q_smv=stSTOP_ecc & S_smv=s1_osm & FWD : ddMOVETO_ecc;
        Q_smv=ddMOVETO_ecc & S_smv=s1_osm &  ! FWD   &    ! BACK : stSTOP_ecc;
        Q_smv=INIT_ecc & S_smv=s1_osm & NDT : stSTOP_ecc;
        Q_smv=INIT_ecc & S_smv=s1_osm & NDT : stEND_ecc;
        TRUE : Q_smv;
***** TWOCYLDISCRTWOCYLDISCR.SMV
        Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;
        Q_smv=INIT_ecc & S_smv=s1_osm & event_NDT : stHOME_ecc;
        Q_smv=stHOME_ecc & S_smv=s1_osm &  FWD : ddMOVETO_ecc;
        Q_smv=stEND_ecc & S_smv=s1_osm &  BACK : ddRETURN_ecc;
        Q_smv=ddMOVETO_ecc & S_smv=s1_osm & event_NDT : stEND_ecc;
        Q_smv=ddRETURN_ecc & S_smv=s1_osm & event_NDT : stHOME_ecc;
        Q_smv=ddRETURN_ecc & S_smv=s1_osm &  & : stSTOP_ecc;
        Q_smv=stSTOP_ecc & S_smv=s1_osm &  BACK : ddRETURN_ecc;
        Q_smv=stSTOP_ecc & S_smv=s1_osm &  FWD : ddMOVETO_ecc;
        Q_smv=ddMOVETO_ecc & S_smv=s1_osm &  & : stSTOP_ecc;
        Q_smv=INIT_ecc & S_smv=s1_osm & event_NDT : stSTOP_ecc;
        Q_smv=INIT_ecc & S_smv=s1_osm & event_NDT : stEND_ecc;
        Q_smv=stSTOP_ecc & S_smv=s1_osm  : stSTOP_ecc;
        TRUE : Q_smv;
*****

***** TwoCylDiscr_ref.smv
esac;

next(S_smv):= case
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(S_smv):= case
*****

***** TwoCylDiscr_ref.smv
        S_smv=s1_osm: 1;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1) | (Q_smv=INIT_ecc & NA < 1) | (Q_smv=stHOME_ecc & NA < 1) | (Q_smv=st
END_ecc & NA < 1) | (Q_smv=ddMOVETO_ecc & NA < 1) | (Q_smv=ddRETURN_ecc & NA < 1) | (Q_smv=stSTOP_ecc & NA < 1)): (NA + 1) mod 
2;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=stHOME_ecc & NA = 1) | (Q_smv=st
END_ecc & NA = 1) | (Q_smv=ddMOVETO_ecc & NA = 1) | (Q_smv=ddRETURN_ecc & NA = 1) | (Q_smv=stSTOP_ecc & NA = 1)):  0 ;
        TRUE : NA;
***** TWOCYLDISCRTWOCYLDISCR.SMV
        S_smv=s1_osm: 1;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1 ) | (Q_smv=INIT_ecc & NA < 1 ) | (Q_smv=stHOME_ecc & NA < 1 ) | (Q_smv
=stEND_ecc & NA < 1 ) | (Q_smv=ddMOVETO_ecc & NA < 1 ) | (Q_smv=ddRETURN_ecc & NA < 1 ) | (Q_smv=stSTOP_ecc & NA < 1 )) : (NA +
 1) mod 2;
        S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=stHOME_ecc & NA = 1) | (Q_smv=st
END_ecc & NA = 1) | (Q_smv=ddMOVETO_ecc & NA = 1) | (Q_smv=ddRETURN_ecc & NA = 1) | (Q_smv=stSTOP_ecc & NA = 1)) :  0 ;
        TRUE : NA;
*****

***** TwoCylDiscr_ref.smv
esac;

next(NI):= case
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(NI):= case
*****

***** TwoCylDiscr_ref.smv
        S_smv=s1_osm: 1;
        S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI < 1) | (Q_smv=INIT_ecc & NA = 1 & NI < 2) | (Q_smv=stHOME_ecc & NA = 1 &
 NI < 2) | (Q_smv=stEND_ecc & NA = 1 & NI < 2) | (Q_smv=ddMOVETO_ecc & NA = 1 & NI < 2) | (Q_smv=ddRETURN_ecc & NA = 1 & NI < 2
) | (Q_smv=stSTOP_ecc & NA = 1 & NI < 2)):(NI + 1) mod 3;
        S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 1) | (Q_smv=INIT_ecc & NA = 1 & NI = 2) | (Q_smv=stHOME_ecc & NA = 1 &
 NI = 2) | (Q_smv=stEND_ecc & NA = 1 & NI = 2) | (Q_smv=ddMOVETO_ecc & NA = 1 & NI = 2) | (Q_smv=ddRETURN_ecc & NA = 1 & NI = 2
) | (Q_smv=stSTOP_ecc & NA = 1 & NI = 2)): 0 ;
        TRUE : NI;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV
        S_smv=s1_osm: 1;
        S_smv=s2_osm &  ((Q_smv=START_ecc & NA = 1  & 2 < 1) | (Q_smv=INIT_ecc & NA = 1  & 2 < 1) | (Q_smv=stHOME_ecc & NA = 1 
 & 2 < 1) | (Q_smv=stEND_ecc & NA = 1  & 2 < 1) | (Q_smv=ddMOVETO_ecc & NA = 1  & 2 < 1) | (Q_smv=ddRETURN_ecc & NA = 1  & 2 < 
1) | (Q_smv=stSTOP_ecc & NA = 1  & 2 < 1)) : (NI + 1) mod 3;
        S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 2) | (Q_smv=INIT_ecc & NA = 1 & NI = 2) | (Q_smv=stHOME_ecc & NA = 1 &
 NI = 2) | (Q_smv=stEND_ecc & NA = 1 & NI = 2) | (Q_smv=ddMOVETO_ecc & NA = 1 & NI = 2) | (Q_smv=ddRETURN_ecc & NA = 1 & NI = 2
) | (Q_smv=stSTOP_ecc & NA = 1 & NI = 2)) :  0 ;        TRUE : NI;
esac;
next(FWD) := case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : FWD_ ;
        TRUE : FWD
esac;
*****

***** TwoCylDiscr_ref.smv

next(FWD):= case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ) : FWD_ ;
        TRUE : FWD;
esac;
next(BACK):= case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ) : BACK_ ;
        TRUE : BACK;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(BACK) := case
        alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : BACK_ ;
        TRUE : BACK
esac;
*****

***** TwoCylDiscr_ref.smv

next(HOME):= case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=1 : (TRUE);
        S_smv=s2_osm & Q_smv=stHOME_ecc & NA=1 & NI=1 : (TRUE);
        S_smv=s2_osm & Q_smv=stEND_ecc & NA=1 & NI=1 : (FALSE);
        S_smv=s2_osm & Q_smv=ddMOVETO_ecc & NA=1 & NI=1 : (FALSE);
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(HOME) := case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=0 : (TRUE);
        S_smv=s2_osm & Q_smv=stHOME_ecc & NA=1 & NI=0 : (TRUE);
        S_smv=s2_osm & Q_smv=stEND_ecc & NA=1 & NI=0 : (FALSE);
        S_smv=s2_osm & Q_smv=ddMOVETO_ecc & NA=1 & NI=0 : (FALSE);
        S_smv=s2_osm & Q_smv=ddRETURN_ecc & NA=1 & NI=0 : (FALSE);
        S_smv=s2_osm & Q_smv=stSTOP_ecc & NA=1 & NI=0 : (FALSE);
        TRUE : HOME
esac;
next(END) := case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=1 : (FALSE);
        S_smv=s2_osm & Q_smv=stHOME_ecc & NA=1 & NI=1 : (FALSE);
        S_smv=s2_osm & Q_smv=stEND_ecc & NA=1 & NI=1 : (TRUE);
        S_smv=s2_osm & Q_smv=ddMOVETO_ecc & NA=1 & NI=1 : (FALSE);
*****

***** TwoCylDiscr_ref.smv
        S_smv=s2_osm & Q_smv=stSTOP_ecc & NA=1 & NI=1 : (FALSE);
        TRUE : HOME;
esac;
next(END):= case
        S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=2 : (FALSE);
        S_smv=s2_osm & Q_smv=stHOME_ecc & NA=1 & NI=2 : (FALSE);
        S_smv=s2_osm & Q_smv=stEND_ecc & NA=1 & NI=2 : (TRUE);
        S_smv=s2_osm & Q_smv=ddMOVETO_ecc & NA=1 & NI=2 : (FALSE);
        S_smv=s2_osm & Q_smv=ddRETURN_ecc & NA=1 & NI=2 : (FALSE);
        S_smv=s2_osm & Q_smv=stSTOP_ecc & NA=1 & NI=2 : (FALSE);
        TRUE : END;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV
        S_smv=s2_osm & Q_smv=stSTOP_ecc & NA=1 & NI=1 : (FALSE);
        TRUE : END
esac;
*****

***** TwoCylDiscr_ref.smv

next(HOME_):= case
S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA=1) | (Q_smv=stHOME_ecc & NA=1) | (Q_smv=stEND_ecc & NA=1) | (Q_smv=ddMOVETO_ecc & N
A=1) | (Q_smv=ddRETURN_ecc & NA=1) | (Q_smv=stSTOP_ecc & NA=1)) : HOME;
        TRUE : HOME_;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(HOME_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=stHOME_ecc & NA=1) | (Q_smv=stEND_ecc & NA=1
) | (Q_smv=ddMOVETO_ecc & NA=1) | (Q_smv=ddRETURN_ecc & NA=1) | (Q_smv=stSTOP_ecc & NA=1)) : HOME;
        TRUE : HOME_;
*****

***** TwoCylDiscr_ref.smv
esac;
next(END_):= case
S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA=1) | (Q_smv=stHOME_ecc & NA=1) | (Q_smv=stEND_ecc & NA=1) | (Q_smv=ddMOVETO_ecc & N
A=1) | (Q_smv=ddRETURN_ecc & NA=1) | (Q_smv=stSTOP_ecc & NA=1)) : END;
        TRUE : END_;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(END_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=stHOME_ecc & NA=1) | (Q_smv=stEND_ecc & NA=1
) | (Q_smv=ddMOVETO_ecc & NA=1) | (Q_smv=ddRETURN_ecc & NA=1) | (Q_smv=stSTOP_ecc & NA=1)) : END;
        TRUE : END_;
*****

***** TwoCylDiscr_ref.smv

DEFINE event_INIT_reset:=       S_smv=s1_osm;
DEFINE event_REQ_reset:=        (alpha & (event_INIT)) | (S_smv=s1_osm);

DEFINE event_INITO_set:=        S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA=1));
DEFINE event_CHG_set:=  S_smv=s2_osm & NI=0 & ((Q_smv=stHOME_ecc & NA=1) | (Q_smv=stEND_ecc & NA=1) | (Q_smv=ddMOVETO_ecc & NA=
1) | (Q_smv=ddRETURN_ecc & NA=1) | (Q_smv=stSTOP_ecc & NA=1));

DEFINE ExistsInputEvent:= event_INIT | event_REQ | NDT;
DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc  & ((event_INIT))) | (Q_smv=INIT_ecc  & ((NDT) | (NDT) | (NDT))) | (Q_smv=stHOME_
ecc  & ((FWD))) | (Q_smv=stEND_ecc  & ((BACK))) | (Q_smv=ddMOVETO_ecc  & ((NDT) | ( ! FWD   &    ! BACK))) | (Q_smv=ddRETURN_ec
c  & ((NDT) | ( ! FWD   &    ! BACK))) | (Q_smv=stSTOP_ecc  & ((BACK) | (FWD)));


FAIRNESS (alpha)
***** TWOCYLDISCRTWOCYLDISCR.SMV

DEFINE event_INIT_reset:= (S_smv=s1_osm);
DEFINE event_REQ_reset:= (alpha & ( INIT )) | (S_smv=s1_osm);
DEFINE event_NDT_reset:= (alpha & ( INIT | REQ )) | (S_smv=s1_osm);

DEFINE event_INITO_set:=        S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA = 1)) ;
DEFINE event_CHG_set:=  S_smv=s2_osm & NI=0 & ((Q_smv=stHOME_ecc & NA = 1) | (Q_smv=stEND_ecc & NA = 1) | (Q_smv=ddMOVETO_ecc &
 NA = 1) | (Q_smv=ddRETURN_ecc & NA = 1) | (Q_smv=stSTOP_ecc & NA = 1)) ;

DEFINE ExistsInputEvent:= event_INIT | event_REQ | event_NDT |;
;
DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc  & ( event_INIT | (Q_smv=INIT_ecc  & ( event_NDT& ( event_NDT& ( event_NDT | (Q_s
mv=stHOME_ecc  & ( FWD)  | (Q_smv=stEND_ecc  & ( BACK)  | (Q_smv=ddMOVETO_ecc  & ( event_NDT& ( &)  | (Q_smv=ddRETURN_ecc  & ( 
event_NDT& ( &)  | (Q_smv=stSTOP_ecc  & ( BACK) & ( FWD) 
FAIRNESS (alpha)
*****

***** TwoCylDiscr_ref.smv
MODULE TwoCylDiscr(event_INIT, event_INITO, alpha, beta)
VAR HorCTL : CylControl (HorCTL_INIT, HorCTL_REQ, HorCTL_INITO, HorCTL_CNF, HorCyl_HOME, HorCyl_END, Button_Pressed, HorCTL_EXT
END, HorCTL_RETRACT, HorCTL_alpha, HorCTL_beta);
VAR VerCTL : CylControl (VerCTL_INIT, VerCTL_REQ, VerCTL_INITO, VerCTL_CNF, VerCyl_HOME, VerCyl_END, Button_Pressed, VerCTL_EXT
END, VerCTL_RETRACT, VerCTL_alpha, VerCTL_beta);
VAR Button : ButtonDs (Button_INIT, Button_REQ, Button_INITO, Button_CHG, Button_LightOn, Button_Pressed, Button_alpha, Button_
beta);
VAR HorCyl : LinearDA (HorCyl_INIT, HorCyl_REQ, HorCyl_INITO, HorCyl_CHG, HorCTL_EXTEND, HorCTL_RETRACT, HorCyl_HOME, HorCyl_EN
D, HorCyl_alpha, HorCyl_beta);
VAR VerCyl : LinearDA (VerCyl_INIT, VerCyl_REQ, VerCyl_INITO, VerCyl_CHG, VerCTL_EXTEND, VerCTL_RETRACT, VerCyl_HOME, VerCyl_EN
D, VerCyl_alpha, VerCyl_beta);

VAR HorCTL_INIT : boolean;
VAR HorCTL_REQ : boolean;
VAR HorCTL_INITO : boolean;
VAR HorCTL_CNF : boolean;
VAR HorCTL_EXTEND : boolean;
VAR HorCTL_RETRACT : boolean;
VAR HorCTL_alpha : boolean;
VAR HorCTL_beta : boolean;

VAR VerCTL_INIT : boolean;
VAR VerCTL_REQ : boolean;
VAR VerCTL_INITO : boolean;
VAR VerCTL_CNF : boolean;
VAR VerCTL_EXTEND : boolean;
VAR VerCTL_RETRACT : boolean;
VAR VerCTL_alpha : boolean;
VAR VerCTL_beta : boolean;

VAR Button_INIT : boolean;
VAR Button_REQ : boolean;
VAR Button_INITO : boolean;
VAR Button_CHG : boolean;
VAR Button_LightOn : boolean;
VAR Button_Pressed : boolean;
VAR Button_alpha : boolean;
VAR Button_beta : boolean;

VAR HorCyl_INIT : boolean;
VAR HorCyl_REQ : boolean;
VAR HorCyl_INITO : boolean;
VAR HorCyl_CHG : boolean;
VAR HorCyl_HOME : boolean;
VAR HorCyl_END : boolean;
VAR HorCyl_alpha : boolean;
VAR HorCyl_beta : boolean;

VAR VerCyl_INIT : boolean;
VAR VerCyl_REQ : boolean;
VAR VerCyl_INITO : boolean;
VAR VerCyl_CHG : boolean;
VAR VerCyl_HOME : boolean;
VAR VerCyl_END : boolean;
VAR VerCyl_alpha : boolean;
VAR VerCyl_beta : boolean;

***** TWOCYLDISCRTWOCYLDISCR.SMV
MODULE TwoCylDiscr(event_INIT, event_INITO, alpha, beta)
VAR  FB1  : CylControl (FB1_INIT,FB1_REQ,FB1_INITO, FB1_CNF, FB1_Retracted, FB1_Extended, FB1_START, FB1_EXTEND, FB1_RETRACT, a
lpha, beta);
VAR  FB2  : CylControl (FB2_INIT,FB2_REQ,FB2_INITO, FB2_CNF, FB2_Retracted, FB2_Extended, FB2_START, FB2_EXTEND, FB2_RETRACT, a
lpha, beta);
VAR  FB3  : ButtonDs (FB3_INIT,FB3_REQ,FB3_NDT,FB3_INITO, FB3_CHG, FB3_LightOn, FB3_Pressed, alpha, beta);
VAR  тFB4  : LinearDA (тFB4_INIT,тFB4_REQ,тFB4_NDT,тFB4_INITO, тFB4_CHG, тFB4_FWD, тFB4_BACK, тFB4_HOME, тFB4_END, al
pha, beta);
VAR  FB5  : LinearDA (FB5_INIT,FB5_REQ,FB5_NDT,FB5_INITO, FB5_CHG, FB5_FWD, FB5_BACK, FB5_HOME, FB5_END, alpha, beta);

*****

***** TwoCylDiscr_ref.smv


***** TWOCYLDISCRTWOCYLDISCR.SMV

-- generateCompositeFBsVariables

VAR FB1_INIT : boolean;
VAR FB1_REQ : boolean;
VAR FB1_INITO : boolean;
VAR FB1_CNF : boolean;
VAR FB1_Retracted : boolean;
VAR FB1_Extended : boolean;
VAR FB1_START : boolean;
VAR FB1_EXTEND : boolean;
VAR FB1_RETRACT : boolean;
VAR FB1_alpha : boolean;
VAR FB1_beta : boolean;
VAR FB2_INIT : boolean;
VAR FB2_REQ : boolean;
VAR FB2_INITO : boolean;
VAR FB2_CNF : boolean;
VAR FB2_Retracted : boolean;
VAR FB2_Extended : boolean;
VAR FB2_START : boolean;
VAR FB2_EXTEND : boolean;
VAR FB2_RETRACT : boolean;
VAR FB2_alpha : boolean;
VAR FB2_beta : boolean;
VAR FB3_INIT : boolean;
VAR FB3_REQ : boolean;
VAR FB3_NDT : boolean;
VAR FB3_INITO : boolean;
VAR FB3_CHG : boolean;
VAR FB3_LightOn : boolean;
VAR FB3_Pressed : boolean;
VAR FB3_alpha : boolean;
VAR FB3_beta : boolean;
VAR тFB4_INIT : boolean;
VAR тFB4_REQ : boolean;
VAR тFB4_NDT : boolean;
VAR тFB4_INITO : boolean;
VAR тFB4_CHG : boolean;
VAR тFB4_FWD : boolean;
VAR тFB4_BACK : boolean;
VAR тFB4_HOME : boolean;
VAR тFB4_END : boolean;
VAR тFB4_alpha : boolean;
VAR тFB4_beta : boolean;
VAR FB5_INIT : boolean;
VAR FB5_REQ : boolean;
VAR FB5_NDT : boolean;
VAR FB5_INITO : boolean;
VAR FB5_CHG : boolean;
VAR FB5_FWD : boolean;
VAR FB5_BACK : boolean;
VAR FB5_HOME : boolean;
VAR FB5_END : boolean;
VAR FB5_alpha : boolean;
VAR FB5_beta : boolean;

*****

***** TwoCylDiscr_ref.smv
ASSIGN
init(HorCTL_INIT):= FALSE;
init(HorCTL_REQ):= FALSE;
init(HorCTL_INITO):= FALSE;
init(HorCTL_CNF):= FALSE;
init(HorCTL_EXTEND):= FALSE;
init(HorCTL_RETRACT):= FALSE;
init(HorCTL_alpha):= FALSE;
init(HorCTL_beta):= FALSE;

init(VerCTL_INIT):= FALSE;
init(VerCTL_REQ):= FALSE;
init(VerCTL_INITO):= FALSE;
init(VerCTL_CNF):= FALSE;
init(VerCTL_EXTEND):= FALSE;
init(VerCTL_RETRACT):= FALSE;
init(VerCTL_alpha):= FALSE;
init(VerCTL_beta):= FALSE;

init(Button_INIT):= FALSE;
init(Button_REQ):= FALSE;
init(Button_INITO):= FALSE;
init(Button_CHG):= FALSE;
init(Button_LightOn):= FALSE;
init(Button_Pressed):= FALSE;
init(Button_alpha):= FALSE;
init(Button_beta):= FALSE;

init(HorCyl_INIT):= FALSE;
init(HorCyl_REQ):= FALSE;
init(HorCyl_INITO):= FALSE;
init(HorCyl_CHG):= FALSE;
init(HorCyl_HOME):= FALSE;
init(HorCyl_END):= FALSE;
init(HorCyl_alpha):= FALSE;
init(HorCyl_beta):= FALSE;

init(VerCyl_INIT):= FALSE;
init(VerCyl_REQ):= FALSE;
init(VerCyl_INITO):= FALSE;
init(VerCyl_CHG):= FALSE;
init(VerCyl_HOME):= FALSE;
init(VerCyl_END):= FALSE;
init(VerCyl_alpha):= FALSE;
init(VerCyl_beta):= FALSE;

***** TWOCYLDISCRTWOCYLDISCR.SMV
ASSIGN
init(FB1_INIT) := FALSE;
init(FB1_REQ) := FALSE;
init(FB1_INITO) := FALSE;
init(FB1_CNF) := FALSE;
init(FB1_Retracted) := FALSE;
init(FB1_Extended) := FALSE;
init(FB1_START) := FALSE;
init(FB1_EXTEND) := FALSE;
init(FB1_RETRACT) := FALSE;
init( FB1_alpha) := FALSE;
init( FB1_beta) := FALSE;
init(FB2_INIT) := FALSE;
init(FB2_REQ) := FALSE;
init(FB2_INITO) := FALSE;
init(FB2_CNF) := FALSE;
init(FB2_Retracted) := FALSE;
init(FB2_Extended) := FALSE;
init(FB2_START) := FALSE;
init(FB2_EXTEND) := FALSE;
init(FB2_RETRACT) := FALSE;
init( FB2_alpha) := FALSE;
init( FB2_beta) := FALSE;
init(FB3_INIT) := FALSE;
init(FB3_REQ) := FALSE;
init(FB3_NDT) := FALSE;
init(FB3_INITO) := FALSE;
init(FB3_CHG) := FALSE;
init(FB3_LightOn) := FALSE;
init(FB3_Pressed) := FALSE;
init( FB3_alpha) := FALSE;
init( FB3_beta) := FALSE;
init(тFB4_INIT) := FALSE;
init(тFB4_REQ) := FALSE;
init(тFB4_NDT) := FALSE;
init(тFB4_INITO) := FALSE;
init(тFB4_CHG) := FALSE;
init(тFB4_FWD) := FALSE;
init(тFB4_BACK) := FALSE;
init(тFB4_HOME) := FALSE;
init(тFB4_END) := FALSE;
init( тFB4_alpha) := FALSE;
init( тFB4_beta) := FALSE;
init(FB5_INIT) := FALSE;
init(FB5_REQ) := FALSE;
init(FB5_NDT) := FALSE;
init(FB5_INITO) := FALSE;
init(FB5_CHG) := FALSE;
init(FB5_FWD) := FALSE;
init(FB5_BACK) := FALSE;
init(FB5_HOME) := FALSE;
init(FB5_END) := FALSE;
init( FB5_alpha) := FALSE;
init( FB5_beta) := FALSE;

*****

***** TwoCylDiscr_ref.smv

next(Button_LightOn) := Button_LightOn;
-- _internalDataConnections

-- ComponentEventOutputs
next(Button_INITO):= case
        Button.event_INITO_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV

-- generateInternalDataConnections


-- generateInnerFBsEventOutputsUpdate

next(FB3_INITO) := case
        FB3.event_INITO_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv
esac;
next(HorCyl_INITO):= case
        HorCyl.event_INITO_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(тFB4_INITO) := case
        тFB4.event_INITO_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv
esac;
next(VerCyl_INITO):= case
        VerCyl.event_INITO_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(FB5_INITO) := case
        FB5.event_INITO_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv
esac;
next(HorCTL_CNF):= case
        HorCTL.event_CNF_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(FB1_CNF) := case
        FB1.event_CNF_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv
esac;
next(HorCyl_CHG):= case
        HorCyl.event_CHG_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(тFB4_CHG) := case
        тFB4.event_CHG_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv
esac;
next(VerCyl_CHG):= case
        VerCyl.event_CHG_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(FB5_CHG) := case
        FB5.event_CHG_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv
esac;
next(HorCTL_INITO):= case
        HorCTL.event_INITO_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(FB1_INITO) := case
        FB1.event_INITO_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv
esac;
next(VerCTL_CNF):= case
        VerCTL.event_CNF_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(FB2_CNF) := case
        FB2.event_CNF_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv
esac;
next(Button_CHG):= case
        Button.event_CHG_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(FB3_CHG) := case
        FB3.event_CHG_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv
esac;
next(VerCTL_INITO):= case
        VerCTL.event_INITO_set : TRUE;
        TRUE : FALSE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
esac;
next(FB2_INITO) := case
        FB2.event_INITO_set : TRUE;
        TRUE : FALSE;
*****

***** TwoCylDiscr_ref.smv


-- ---DISPATCHER--- --
-- *************** --
next(HorCTL_alpha):= case
        alpha & omega & !ExistsInputEvent : TRUE;
        HorCTL.alpha_reset : FALSE;
        TRUE : HorCTL_alpha;
esac;
next(HorCTL_beta):= case
        HorCTL_beta & omega : FALSE;
        HorCTL.beta_set : TRUE;
        TRUE : HorCTL_beta;
esac;
next(VerCTL_alpha):= case
        HorCTL_beta & omega : TRUE;
        VerCTL.alpha_reset : FALSE;
        TRUE : VerCTL_alpha;
esac;
next(VerCTL_beta):= case
        VerCTL_beta & omega : FALSE;
        VerCTL.beta_set : TRUE;
        TRUE : VerCTL_beta;
esac;
next(Button_alpha):= case
        VerCTL_beta & omega : TRUE;
        Button.alpha_reset : FALSE;
        TRUE : Button_alpha;
esac;
next(Button_beta):= case
        Button_beta & omega : FALSE;
        Button.beta_set : TRUE;
        TRUE : Button_beta;
esac;
next(HorCyl_alpha):= case
        Button_beta & omega : TRUE;
        HorCyl.alpha_reset : FALSE;
        TRUE : HorCyl_alpha;
esac;
next(HorCyl_beta):= case
        HorCyl_beta & omega : FALSE;
        HorCyl.beta_set : TRUE;
        TRUE : HorCyl_beta;
esac;
next(VerCyl_alpha):= case
        HorCyl_beta & omega : TRUE;
        VerCyl.alpha_reset : FALSE;
        TRUE : VerCyl_alpha;
esac;
next(VerCyl_beta):= case
        VerCyl_beta & omega : FALSE;
        VerCyl.beta_set : TRUE;
        TRUE : VerCyl_beta;
esac;
DEFINE beta_set:= VerCyl_beta & omega;
DEFINE alpha_reset:= alpha & omega & !ExistsInputEvent;
***** TWOCYLDISCRTWOCYLDISCR.SMV

-- DISPATCHER

next(FB1_alpha):= case
        alpha & omega & !ExistsInputEvent : TRUE;
        FB1.alpha_reset : FALSE;
        TRUE : FB1_alpha;
esac;
next(FB1_beta):= case
        beta & omega & !ExistsInputEvent : TRUE;
        FB1.beta_set : FALSE;
        TRUE : FB1_beta;
esac;
next(FB2_alpha):= case
        alpha & omega & !ExistsInputEvent : TRUE;
        FB2.alpha_reset : FALSE;
        TRUE : FB2_alpha;
esac;
next(FB2_beta):= case
        beta & omega & !ExistsInputEvent : TRUE;
        FB2.beta_set : FALSE;
        TRUE : FB2_beta;
esac;
next(FB3_alpha):= case
        alpha & omega & !ExistsInputEvent : TRUE;
        FB3.alpha_reset : FALSE;
        TRUE : FB3_alpha;
esac;
next(FB3_beta):= case
        beta & omega & !ExistsInputEvent : TRUE;
        FB3.beta_set : FALSE;
        TRUE : FB3_beta;
esac;
next(тFB4_alpha):= case
        alpha & omega & !ExistsInputEvent : TRUE;
        тFB4.alpha_reset : FALSE;
        TRUE : тFB4_alpha;
esac;
next(тFB4_beta):= case
        beta & omega & !ExistsInputEvent : TRUE;
        тFB4.beta_set : FALSE;
        TRUE : тFB4_beta;
esac;
next(FB5_alpha):= case
        alpha & omega & !ExistsInputEvent : TRUE;
        FB5.alpha_reset : FALSE;
        TRUE : FB5_alpha;
esac;
next(FB5_beta):= case
        beta & omega & !ExistsInputEvent : TRUE;
        FB5.beta_set : FALSE;
        TRUE : FB5_beta;
esac;
DEFINE beta_reset:= & omega;
DEFINE alpha_reset:= alpha & omega & !ExistsInputEvent;
*****

***** TwoCylDiscr_ref.smv


-- _internalEventConnections
next(HorCyl_INIT):= case
        (Button_INITO) : TRUE;
        (HorCyl.event_INIT_reset) : FALSE;
        TRUE : HorCyl_INIT;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

-- generateInternalEventConnections

next(тFB4_INIT):= case
        (FB3_INITO)
        (тFB4.event_INIT_reset) : FALSE;
        TRUE : тFB4_INIT;
esac;
*****

***** TwoCylDiscr_ref.smv

next(VerCyl_INIT):= case
        (HorCyl_INITO) : TRUE;
        (VerCyl.event_INIT_reset) : FALSE;
        TRUE : VerCyl_INIT;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(FB2_REQ):= case
        (FB5_CHG | FB3_CHG)
        (FB2.event_REQ_reset) : FALSE;
        TRUE : FB2_REQ;
esac;
*****

***** TwoCylDiscr_ref.smv

next(HorCTL_INIT):= case
        (VerCyl_INITO) : TRUE;
        (HorCTL.event_INIT_reset) : FALSE;
        TRUE : HorCTL_INIT;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(FB1_INIT):= case
        (FB5_INITO)
        (FB1.event_INIT_reset) : FALSE;
        TRUE : FB1_INIT;
esac;
*****

***** TwoCylDiscr_ref.smv

next(HorCyl_REQ):= case
        (HorCTL_CNF) : TRUE;
        (HorCyl.event_REQ_reset) : FALSE;
        TRUE : HorCyl_REQ;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(FB3_REQ):= case
        (FB2_INITO)
        (FB3.event_REQ_reset) : FALSE;
        TRUE : FB3_REQ;
esac;
*****

***** TwoCylDiscr_ref.smv

next(HorCTL_REQ):= case
        (HorCyl_CHG | Button_CHG) : TRUE;
        (HorCTL.event_REQ_reset) : FALSE;
        TRUE : HorCTL_REQ;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(FB5_INIT):= case
        (тFB4_INITO)
        (FB5.event_INIT_reset) : FALSE;
        TRUE : FB5_INIT;
esac;
*****

***** TwoCylDiscr_ref.smv

next(VerCTL_REQ):= case
        (VerCyl_CHG | Button_CHG) : TRUE;
        (VerCTL.event_REQ_reset) : FALSE;
        TRUE : VerCTL_REQ;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(FB5_REQ):= case
        (FB2_CNF)
        (FB5.event_REQ_reset) : FALSE;
        TRUE : FB5_REQ;
esac;
*****

***** TwoCylDiscr_ref.smv

next(VerCTL_INIT):= case
        (HorCTL_INITO) : TRUE;
        (VerCTL.event_INIT_reset) : FALSE;
        TRUE : VerCTL_INIT;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(FB3_INIT):= case
        ((event_null & alpha))
        (FB3.event_INIT_reset) : FALSE;
        TRUE : FB3_INIT;
esac;
*****

***** TwoCylDiscr_ref.smv

next(VerCyl_REQ):= case
        (VerCTL_CNF) : TRUE;
        (VerCyl.event_REQ_reset) : FALSE;
        TRUE : VerCyl_REQ;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(тFB4_REQ):= case
        (FB1_CNF)
        (тFB4.event_REQ_reset) : FALSE;
        TRUE : тFB4_REQ;
esac;
*****

***** TwoCylDiscr_ref.smv

next(Button_INIT):= case
        ((event_INIT & alpha)) : TRUE;
        (Button.event_INIT_reset) : FALSE;
        TRUE : Button_INIT;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(FB1_REQ):= case
        (тFB4_CHG | FB3_CHG)
        (FB1.event_REQ_reset) : FALSE;
        TRUE : FB1_REQ;
esac;
*****

***** TwoCylDiscr_ref.smv

next(Button_REQ):= case
        (VerCTL_INITO) : TRUE;
        (Button.event_REQ_reset) : FALSE;
        TRUE : Button_REQ;
esac;
***** TWOCYLDISCRTWOCYLDISCR.SMV

next(FB2_INIT):= case
        (FB1_INITO)
        (FB2.event_INIT_reset) : FALSE;
        TRUE : FB2_INIT;
esac;
*****

***** TwoCylDiscr_ref.smv

DEFINE event_INITO_set:=        (VerCTL_INITO);

DEFINE event_INIT_reset:= alpha;
DEFINE ExistsInputEvent:= event_INIT;

DEFINE omega:= !(Button_INITO | HorCyl_INITO | VerCyl_INITO | HorCTL_CNF | HorCyl_CHG | VerCyl_CHG | HorCTL_INITO | VerCTL_CNF 
| Button_CHG | VerCTL_INITO);

DEFINE phi:= (!ExistsInputEvent) & (!(HorCTL_INIT | HorCTL_REQ | HorCTL_INITO | HorCTL_CNF | VerCTL_INIT | VerCTL_REQ | VerCTL_
INITO | VerCTL_CNF | Button_INIT | Button_REQ | Button_INITO | Button_CHG | HorCyl_INIT | HorCyl_REQ | HorCyl_INITO | HorCyl_CH
G | VerCyl_INIT | VerCyl_REQ | VerCyl_INITO | VerCyl_CHG));

FAIRNESS (alpha)
***** TWOCYLDISCRTWOCYLDISCR.SMV

DEFINE event_INITO_set:= (FB2_INITO |  );
DEFINE event_INIT_reset:= alpha;
DEFINE ExistsInputEvent :=  event_INIT ;

DEFINE omega:= !(тFB4_INITO | FB5_INITO | FB3_CHG | FB1_INITO | FB2_CNF | тFB4_CHG | FB2_INITO | FB5_CHG | FB1_CNF | FB3_INIT
O);

DEFINE phi:= (!ExistsInputEvent) & (!(тFB4_INIT | FB2_REQ | FB1_INIT | FB3_REQ | FB5_INIT | FB5_REQ | FB3_INIT | тFB4_REQ | F
B1_REQ | FB2_INIT |  | тFB4_INITO | FB5_INITO | FB3_CHG | FB1_INITO | FB2_CNF | тFB4_CHG | FB2_INITO | FB5_CHG | FB1_CNF | FB
3_INITO ));
FAIRNESS (alpha)
*****

***** TwoCylDiscr_ref.smv
MODULE main()
VAR TwoCylDiscr_inst : TwoCylDiscr (TwoCylDiscr_inst_INIT, TwoCylDiscr_inst_INITO, TwoCylDiscr_inst_alpha, TwoCylDiscr_inst_bet
a);

***** TWOCYLDISCRTWOCYLDISCR.SMV
MODULE main()
VAR TwoCylDiscr_inst : TwoCylDiscr (TwoCylDiscr_inst_INIT, TwoCylDiscr_inst_INITO,  TwoCylDiscr_inst_alpha, TwoCylDiscr_inst_be
ta);

*****

***** TwoCylDiscr_ref.smv
VAR TwoCylDiscr_inst_beta : boolean;


VAR false_var : boolean;
***** TWOCYLDISCRTWOCYLDISCR.SMV
VAR TwoCylDiscr_inst_beta : boolean;
VAR false_var : boolean;
*****

***** TwoCylDiscr_ref.smv
init(false_var):= FALSE;
next(false_var) := FALSE;
init(TwoCylDiscr_inst_INIT):= TRUE;
init(TwoCylDiscr_inst_INITO):= TRUE;


init(TwoCylDiscr_inst_alpha):= TRUE;
***** TWOCYLDISCRTWOCYLDISCR.SMV
init(false_var):= FALSE;
next(false_var):= FALSE;
init (TwoCylDiscr_inst_INIT) := TRUE;
init (TwoCylDiscr_inst_INITO) := TRUE;
init(TwoCylDiscr_inst_alpha):= TRUE;
*****

***** TwoCylDiscr_ref.smv
init(TwoCylDiscr_inst_beta):= FALSE;
next(TwoCylDiscr_inst_INIT):= case
***** TWOCYLDISCRTWOCYLDISCR.SMV
init(TwoCylDiscr_inst_beta):= FALSE;

next(TwoCylDiscr_inst_INIT):= case
*****

***** TwoCylDiscr_ref.smv
next(TwoCylDiscr_inst_INITO):= case
TwoCylDiscr_inst.event_INITO_set : TRUE;
        TRUE : TwoCylDiscr_inst_INITO;
***** TWOCYLDISCRTWOCYLDISCR.SMV
next(TwoCylDiscr_inst_INITO):= case
TwoCylDiscr_inst.event_INITO_reset : FALSE;
        TRUE : TwoCylDiscr_inst_INITO;
*****

