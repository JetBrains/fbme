MODULE CylControl(event_INIT,event_REQ,event_INITO,event_CNF,Retracted_,Extended_,START_,EXTEND_,RETRACT_,alpha, beta)
VAR Retracted : boolean;
VAR Extended : boolean;
VAR START : boolean;
VAR EXTEND : boolean;
VAR RETRACT : boolean;
VAR S_smv : {s0_osm, s1_osm, s2_osm};
VAR Q_smv : {START_ecc,INIT_ecc,GO_ecc,S_RETURN_ecc,NOMOVE_ecc}

VAR NA: 0..1;
VAR NI: 0..2;

ASSIGN
init(Q_smv):= START_ecc;
init(S_smv):= s0_osm;
-- _moduleVariablesInitBlock
init(Retracted):= FALSE;
init(Extended):= FALSE;
init(START):= FALSE;
init(EXTEND):= FALSE;
init(RETRACT):= FALSE;
init(NA):= 0;
init(NI):= 0;


next(Q_smv):= case
	Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;
	Q_smv=INIT_ecc & S_smv=s1_osm  : START_ecc;
	Q_smv=START_ecc & S_smv=s1_osm & event_REQ&  START : GO_ecc;
	Q_smv=GO_ecc & S_smv=s1_osm & event_REQ&  Extended : S_RETURN_ecc;
	Q_smv=S_RETURN_ecc & S_smv=s1_osm & event_REQ&  Retracted : NOMOVE_ecc;
	Q_smv=NOMOVE_ecc & S_smv=s1_osm  : START_ecc;
	Q_smv=S_RETURN_ecc & S_smv=s1_osm  : S_RETURN_ecc;
	TRUE : Q_smv;
esac;
next(S_smv):= case
	alpha & S_smv=s0_osm & ExistsInputEvent: s1_osm;
	S_smv=s1_osm & ExistsEnabledECTran: s2_osm;
	S_smv=s2_osm & NA=0 : s1_osm;
	S_smv=s1_osm & (!ExistsEnabledECTran): s0_osm;
	TRUE : S_smv;
esac;

next(NA):= case
	S_smv=s1_osm: 1;
	S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1 ) | (Q_smv=INIT_ecc & NA < 1 ) | (Q_smv=GO_ecc & NA < 1 ) | (Q_smv=S_RETURN_ecc & NA < 1 ) | (Q_smv=NOMOVE_ecc & NA < 1 )) : (NA + 1) mod 2;
	S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=GO_ecc & NA = 1) | (Q_smv=S_RETURN_ecc & NA = 1) | (Q_smv=NOMOVE_ecc & NA = 1)) :  0 ;
	TRUE : NA;
esac;

next(NI):= case
	S_smv=s1_osm: 1;
	S_smv=s2_osm &  ((Q_smv=START_ecc & NA = 1  & 2 < 1) | (Q_smv=INIT_ecc & NA = 1  & 2 < 1) | (Q_smv=GO_ecc & NA = 1  & 2 < 1) | (Q_smv=S_RETURN_ecc & NA = 1  & 2 < 1) | (Q_smv=NOMOVE_ecc & NA = 1  & 2 < 1)) : (NI + 1) mod 3;
	S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 2) | (Q_smv=INIT_ecc & NA = 1 & NI = 2) | (Q_smv=GO_ecc & NA = 1 & NI = 2) | (Q_smv=S_RETURN_ecc & NA = 1 & NI = 2) | (Q_smv=NOMOVE_ecc & NA = 1 & NI = 2)) :  0 ;	TRUE : NI;
esac;
next(Retracted) := case
	alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : Retracted_ ;
	TRUE : Retracted
esac;

next(Extended) := case
	alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : Extended_ ;
	TRUE : Extended
esac;

next(START) := case
	alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : START_ ;
	TRUE : START
esac;

next(EXTEND) := case
	S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=0 : (FALSE);
	S_smv=s2_osm & Q_smv=GO_ecc & NA=1 & NI=0 : (TRUE);
	S_smv=s2_osm & Q_smv=S_RETURN_ecc & NA=1 & NI=0 : (FALSE);
	S_smv=s2_osm & Q_smv=NOMOVE_ecc & NA=1 & NI=0 : (FALSE);
	TRUE : EXTEND
esac;
next(RETRACT) := case
	S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=1 : (FALSE);
	S_smv=s2_osm & Q_smv=GO_ecc & NA=1 & NI=1 : (FALSE);
	S_smv=s2_osm & Q_smv=S_RETURN_ecc & NA=1 & NI=1 : (TRUE);
	S_smv=s2_osm & Q_smv=NOMOVE_ecc & NA=1 & NI=1 : (FALSE);
	TRUE : RETRACT
esac;

next(EXTEND_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=GO_ecc & NA=1) | (Q_smv=S_RETURN_ecc & NA=1) | (Q_smv=NOMOVE_ecc & NA=1)) : EXTEND;
	TRUE : EXTEND_;
esac;
next(RETRACT_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=GO_ecc & NA=1) | (Q_smv=S_RETURN_ecc & NA=1) | (Q_smv=NOMOVE_ecc & NA=1)) : RETRACT;
	TRUE : RETRACT_;
esac;

DEFINE alpha_reset:= 	(alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));
DEFINE beta_set:= 	(alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));

DEFINE event_INIT_reset:= (S_smv=s1_osm);
DEFINE event_REQ_reset:= (alpha & ( INIT )) | (S_smv=s1_osm);

DEFINE event_INITO_set:=	S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA = 1)) ;
DEFINE event_CNF_set:=	S_smv=s2_osm & NI=0 & ((Q_smv=GO_ecc & NA = 1) | (Q_smv=S_RETURN_ecc & NA = 1) | (Q_smv=NOMOVE_ecc & NA = 1)) ;

DEFINE ExistsInputEvent:= event_INIT | event_REQ |;
;
DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc  & ( event_INIT& ( event_REQ& ( START)  | (Q_smv=INIT_ecc   | (Q_smv=GO_ecc  & ( event_REQ& ( Extended)  | (Q_smv=S_RETURN_ecc  & ( event_REQ& ( Retracted)  | (Q_smv=NOMOVE_ecc  
FAIRNESS (alpha)
FAIRNESS (beta)


MODULE ButtonDs(event_INIT,event_REQ,event_NDT,event_INITO,event_CHG,LightOn_,Pressed_,alpha, beta)
VAR LightOn : boolean;
VAR Pressed : boolean;
VAR S_smv : {s0_osm, s1_osm, s2_osm};
VAR Q_smv : {START_ecc,INIT_ecc,OFF_ecc,PRESSED_ecc}

VAR NA: 0..1;
VAR NI: 0..1;

ASSIGN
init(Q_smv):= START_ecc;
init(S_smv):= s0_osm;
-- _moduleVariablesInitBlock
init(LightOn):= FALSE;
init(Pressed):= FALSE;
init(NA):= 0;
init(NI):= 0;

next(Q_smv):= case
	Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;
	Q_smv=INIT_ecc & S_smv=s1_osm & event_REQ : OFF_ecc;
	TRUE : Q_smv;
esac;
next(S_smv):= case
	alpha & S_smv=s0_osm & ExistsInputEvent: s1_osm;
	S_smv=s1_osm & ExistsEnabledECTran: s2_osm;
	S_smv=s2_osm & NA=0 : s1_osm;
	S_smv=s1_osm & (!ExistsEnabledECTran): s0_osm;
	TRUE : S_smv;
esac;

next(NA):= case
	S_smv=s1_osm: 1;
	S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1 ) | (Q_smv=INIT_ecc & NA < 1 ) | (Q_smv=OFF_ecc & NA < 1 ) | (Q_smv=PRESSED_ecc & NA < 1 )) : (NA + 1) mod 2;
	S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=OFF_ecc & NA = 1) | (Q_smv=PRESSED_ecc & NA = 1)) :  0 ;
	TRUE : NA;
esac;
next(NI):= case
	S_smv=s1_osm: 1;
	S_smv=s2_osm &  ((Q_smv=START_ecc & NA = 1  & 1 < 1) | (Q_smv=INIT_ecc & NA = 1  & 1 < 1) | (Q_smv=OFF_ecc & NA = 1  & 1 < 1) | (Q_smv=PRESSED_ecc & NA = 1  & 1 < 1)) : (NI + 1) mod 2;
	S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 1) | (Q_smv=INIT_ecc & NA = 1 & NI = 1) | (Q_smv=OFF_ecc & NA = 1 & NI = 1) | (Q_smv=PRESSED_ecc & NA = 1 & NI = 1)) :  0 ;	TRUE : NI;
esac;
next(LightOn) := case
	alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : LightOn_ ;
	TRUE : LightOn
esac;

next(Pressed) := case
	S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=0 : (FALSE);
	S_smv=s2_osm & Q_smv=OFF_ecc & NA=1 & NI=0 : (TRUE);
	S_smv=s2_osm & Q_smv=PRESSED_ecc & NA=1 & NI=0 : (TRUE);
	TRUE : Pressed
esac;

next(Pressed_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=OFF_ecc & NA=1) | (Q_smv=PRESSED_ecc & NA=1)) : Pressed;
	TRUE : Pressed_;
esac;

DEFINE alpha_reset:= 	(alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));
DEFINE beta_set:= 	(alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));

DEFINE event_INIT_reset:= (S_smv=s1_osm);
DEFINE event_REQ_reset:= (alpha & ( INIT )) | (S_smv=s1_osm);
DEFINE event_NDT_reset:= (alpha & ( INIT | REQ )) | (S_smv=s1_osm);

DEFINE event_INITO_set:=	S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA = 1)) ;
DEFINE event_CHG_set:=	S_smv=s2_osm & NI=0 & ((Q_smv=OFF_ecc & NA = 1) | (Q_smv=PRESSED_ecc & NA = 1)) ;

DEFINE ExistsInputEvent:= event_INIT | event_REQ | event_NDT |;
;
DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc  & ( event_INIT | (Q_smv=INIT_ecc  & ( event_REQ | (Q_smv=OFF_ecc   | (Q_smv=PRESSED_ecc  
FAIRNESS (alpha)
FAIRNESS (beta)


MODULE LinearDA(event_INIT,event_REQ,event_NDT,event_INITO,event_CHG,FWD_,BACK_,HOME_,END_,alpha, beta)
VAR FWD : boolean;
VAR BACK : boolean;
VAR HOME : boolean;
VAR END : boolean;
VAR S_smv : {s0_osm, s1_osm, s2_osm};
VAR Q_smv : {START_ecc,INIT_ecc,stHOME_ecc,stEND_ecc,ddMOVETO_ecc,ddRETURN_ecc,stSTOP_ecc}

VAR NA: 0..1;
VAR NI: 0..2;

ASSIGN
init(Q_smv):= START_ecc;
init(S_smv):= s0_osm;
-- _moduleVariablesInitBlock
init(FWD):= FALSE;
init(BACK):= FALSE;
init(HOME):= FALSE;
init(END):= FALSE;
init(NA):= 0;
init(NI):= 0;

next(Q_smv):= case
	Q_smv=START_ecc & S_smv=s1_osm & event_INIT : INIT_ecc;
	Q_smv=INIT_ecc & S_smv=s1_osm & event_NDT : stHOME_ecc;
	Q_smv=stHOME_ecc & S_smv=s1_osm &  FWD : ddMOVETO_ecc;
	Q_smv=stEND_ecc & S_smv=s1_osm &  BACK : ddRETURN_ecc;
	Q_smv=ddMOVETO_ecc & S_smv=s1_osm & event_NDT : stEND_ecc;
	Q_smv=ddRETURN_ecc & S_smv=s1_osm & event_NDT : stHOME_ecc;
	Q_smv=ddRETURN_ecc & S_smv=s1_osm &  & : stSTOP_ecc;
	Q_smv=stSTOP_ecc & S_smv=s1_osm &  BACK : ddRETURN_ecc;
	Q_smv=stSTOP_ecc & S_smv=s1_osm &  FWD : ddMOVETO_ecc;
	Q_smv=ddMOVETO_ecc & S_smv=s1_osm &  & : stSTOP_ecc;
	Q_smv=INIT_ecc & S_smv=s1_osm & event_NDT : stSTOP_ecc;
	Q_smv=INIT_ecc & S_smv=s1_osm & event_NDT : stEND_ecc;
	Q_smv=stSTOP_ecc & S_smv=s1_osm  : stSTOP_ecc;
	TRUE : Q_smv;
esac;
next(S_smv):= case
	alpha & S_smv=s0_osm & ExistsInputEvent: s1_osm;
	S_smv=s1_osm & ExistsEnabledECTran: s2_osm;
	S_smv=s2_osm & NA=0 : s1_osm;
	S_smv=s1_osm & (!ExistsEnabledECTran): s0_osm;
	TRUE : S_smv;
esac;

next(NA):= case
	S_smv=s1_osm: 1;
	S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA < 1 ) | (Q_smv=INIT_ecc & NA < 1 ) | (Q_smv=stHOME_ecc & NA < 1 ) | (Q_smv=stEND_ecc & NA < 1 ) | (Q_smv=ddMOVETO_ecc & NA < 1 ) | (Q_smv=ddRETURN_ecc & NA < 1 ) | (Q_smv=stSTOP_ecc & NA < 1 )) : (NA + 1) mod 2;
	S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA = 1) | (Q_smv=INIT_ecc & NA = 1) | (Q_smv=stHOME_ecc & NA = 1) | (Q_smv=stEND_ecc & NA = 1) | (Q_smv=ddMOVETO_ecc & NA = 1) | (Q_smv=ddRETURN_ecc & NA = 1) | (Q_smv=stSTOP_ecc & NA = 1)) :  0 ;
	TRUE : NA;
esac;
next(NI):= case
	S_smv=s1_osm: 1;
	S_smv=s2_osm &  ((Q_smv=START_ecc & NA = 1  & 2 < 1) | (Q_smv=INIT_ecc & NA = 1  & 2 < 1) | (Q_smv=stHOME_ecc & NA = 1  & 2 < 1) | (Q_smv=stEND_ecc & NA = 1  & 2 < 1) | (Q_smv=ddMOVETO_ecc & NA = 1  & 2 < 1) | (Q_smv=ddRETURN_ecc & NA = 1  & 2 < 1) | (Q_smv=stSTOP_ecc & NA = 1  & 2 < 1)) : (NI + 1) mod 3;
	S_smv=s2_osm & ((Q_smv=START_ecc & NA = 1 & NI = 2) | (Q_smv=INIT_ecc & NA = 1 & NI = 2) | (Q_smv=stHOME_ecc & NA = 1 & NI = 2) | (Q_smv=stEND_ecc & NA = 1 & NI = 2) | (Q_smv=ddMOVETO_ecc & NA = 1 & NI = 2) | (Q_smv=ddRETURN_ecc & NA = 1 & NI = 2) | (Q_smv=stSTOP_ecc & NA = 1 & NI = 2)) :  0 ;	TRUE : NI;
esac;
next(FWD) := case
	alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : FWD_ ;
	TRUE : FWD
esac;

next(BACK) := case
	alpha & S_smv=s0_osm & (event_INIT | event_REQ | ) : BACK_ ;
	TRUE : BACK
esac;

next(HOME) := case
	S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=0 : (TRUE);
	S_smv=s2_osm & Q_smv=stHOME_ecc & NA=1 & NI=0 : (TRUE);
	S_smv=s2_osm & Q_smv=stEND_ecc & NA=1 & NI=0 : (FALSE);
	S_smv=s2_osm & Q_smv=ddMOVETO_ecc & NA=1 & NI=0 : (FALSE);
	S_smv=s2_osm & Q_smv=ddRETURN_ecc & NA=1 & NI=0 : (FALSE);
	S_smv=s2_osm & Q_smv=stSTOP_ecc & NA=1 & NI=0 : (FALSE);
	TRUE : HOME
esac;
next(END) := case
	S_smv=s2_osm & Q_smv=INIT_ecc & NA=1 & NI=1 : (FALSE);
	S_smv=s2_osm & Q_smv=stHOME_ecc & NA=1 & NI=1 : (FALSE);
	S_smv=s2_osm & Q_smv=stEND_ecc & NA=1 & NI=1 : (TRUE);
	S_smv=s2_osm & Q_smv=ddMOVETO_ecc & NA=1 & NI=1 : (FALSE);
	S_smv=s2_osm & Q_smv=ddRETURN_ecc & NA=1 & NI=1 : (FALSE);
	S_smv=s2_osm & Q_smv=stSTOP_ecc & NA=1 & NI=1 : (FALSE);
	TRUE : END
esac;

next(HOME_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=stHOME_ecc & NA=1) | (Q_smv=stEND_ecc & NA=1) | (Q_smv=ddMOVETO_ecc & NA=1) | (Q_smv=ddRETURN_ecc & NA=1) | (Q_smv=stSTOP_ecc & NA=1)) : HOME;
	TRUE : HOME_;
esac;
next(END_) := case
S_smv=s2_osm & NI=0 & ((Q_smv=START_ecc & NA=1) | (Q_smv=INIT_ecc & NA=1) | (Q_smv=stHOME_ecc & NA=1) | (Q_smv=stEND_ecc & NA=1) | (Q_smv=ddMOVETO_ecc & NA=1) | (Q_smv=ddRETURN_ecc & NA=1) | (Q_smv=stSTOP_ecc & NA=1)) : END;
	TRUE : END_;
esac;

DEFINE alpha_reset:= 	(alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));
DEFINE beta_set:= 	(alpha & S_smv=s0_osm & !ExistsInputEvent | S_smv=s1_osm & (!ExistsEnabledECTran));

DEFINE event_INIT_reset:= (S_smv=s1_osm);
DEFINE event_REQ_reset:= (alpha & ( INIT )) | (S_smv=s1_osm);
DEFINE event_NDT_reset:= (alpha & ( INIT | REQ )) | (S_smv=s1_osm);

DEFINE event_INITO_set:=	S_smv=s2_osm & NI=0 & ((Q_smv=INIT_ecc & NA = 1)) ;
DEFINE event_CHG_set:=	S_smv=s2_osm & NI=0 & ((Q_smv=stHOME_ecc & NA = 1) | (Q_smv=stEND_ecc & NA = 1) | (Q_smv=ddMOVETO_ecc & NA = 1) | (Q_smv=ddRETURN_ecc & NA = 1) | (Q_smv=stSTOP_ecc & NA = 1)) ;

DEFINE ExistsInputEvent:= event_INIT | event_REQ | event_NDT |;
;
DEFINE ExistsEnabledECTran:= (Q_smv=START_ecc  & ( event_INIT | (Q_smv=INIT_ecc  & ( event_NDT& ( event_NDT& ( event_NDT | (Q_smv=stHOME_ecc  & ( FWD)  | (Q_smv=stEND_ecc  & ( BACK)  | (Q_smv=ddMOVETO_ecc  & ( event_NDT& ( &)  | (Q_smv=ddRETURN_ecc  & ( event_NDT& ( &)  | (Q_smv=stSTOP_ecc  & ( BACK) & ( FWD) 
FAIRNESS (alpha)
FAIRNESS (beta)


MODULE TwoCylDiscr(event_INIT, event_INITO, alpha, beta)
VAR  FB1  : CylControl (FB1_INIT,FB1_REQ,FB1_INITO, FB1_CNF, FB1_Retracted, FB1_Extended, FB1_START, FB1_EXTEND, FB1_RETRACT, alpha, beta);
VAR  FB2  : CylControl (FB2_INIT,FB2_REQ,FB2_INITO, FB2_CNF, FB2_Retracted, FB2_Extended, FB2_START, FB2_EXTEND, FB2_RETRACT, alpha, beta);
VAR  FB3  : ButtonDs (FB3_INIT,FB3_REQ,FB3_NDT,FB3_INITO, FB3_CHG, FB3_LightOn, FB3_Pressed, alpha, beta);
VAR  тFB4  : LinearDA (тFB4_INIT,тFB4_REQ,тFB4_NDT,тFB4_INITO, тFB4_CHG, тFB4_FWD, тFB4_BACK, тFB4_HOME, тFB4_END, alpha, beta);
VAR  FB5  : LinearDA (FB5_INIT,FB5_REQ,FB5_NDT,FB5_INITO, FB5_CHG, FB5_FWD, FB5_BACK, FB5_HOME, FB5_END, alpha, beta);


-- generateCompositeFBsVariables

VAR FB1_INIT : boolean;
VAR FB1_REQ : boolean;
VAR FB1_INITO : boolean;
VAR FB1_CNF : boolean;
VAR FB1_Retracted : boolean;
VAR FB1_Extended : boolean;
VAR FB1_START : boolean;
VAR FB1_EXTEND : boolean;
VAR FB1_RETRACT : boolean;
VAR FB1_alpha : boolean;
VAR FB1_beta : boolean;
VAR FB2_INIT : boolean;
VAR FB2_REQ : boolean;
VAR FB2_INITO : boolean;
VAR FB2_CNF : boolean;
VAR FB2_Retracted : boolean;
VAR FB2_Extended : boolean;
VAR FB2_START : boolean;
VAR FB2_EXTEND : boolean;
VAR FB2_RETRACT : boolean;
VAR FB2_alpha : boolean;
VAR FB2_beta : boolean;
VAR FB3_INIT : boolean;
VAR FB3_REQ : boolean;
VAR FB3_NDT : boolean;
VAR FB3_INITO : boolean;
VAR FB3_CHG : boolean;
VAR FB3_LightOn : boolean;
VAR FB3_Pressed : boolean;
VAR FB3_alpha : boolean;
VAR FB3_beta : boolean;
VAR тFB4_INIT : boolean;
VAR тFB4_REQ : boolean;
VAR тFB4_NDT : boolean;
VAR тFB4_INITO : boolean;
VAR тFB4_CHG : boolean;
VAR тFB4_FWD : boolean;
VAR тFB4_BACK : boolean;
VAR тFB4_HOME : boolean;
VAR тFB4_END : boolean;
VAR тFB4_alpha : boolean;
VAR тFB4_beta : boolean;
VAR FB5_INIT : boolean;
VAR FB5_REQ : boolean;
VAR FB5_NDT : boolean;
VAR FB5_INITO : boolean;
VAR FB5_CHG : boolean;
VAR FB5_FWD : boolean;
VAR FB5_BACK : boolean;
VAR FB5_HOME : boolean;
VAR FB5_END : boolean;
VAR FB5_alpha : boolean;
VAR FB5_beta : boolean;

ASSIGN
init(FB1_INIT) := FALSE;
init(FB1_REQ) := FALSE;
init(FB1_INITO) := FALSE;
init(FB1_CNF) := FALSE;
init(FB1_Retracted) := FALSE;
init(FB1_Extended) := FALSE;
init(FB1_START) := FALSE;
init(FB1_EXTEND) := FALSE;
init(FB1_RETRACT) := FALSE;
init( FB1_alpha) := FALSE;
init( FB1_beta) := FALSE;
init(FB2_INIT) := FALSE;
init(FB2_REQ) := FALSE;
init(FB2_INITO) := FALSE;
init(FB2_CNF) := FALSE;
init(FB2_Retracted) := FALSE;
init(FB2_Extended) := FALSE;
init(FB2_START) := FALSE;
init(FB2_EXTEND) := FALSE;
init(FB2_RETRACT) := FALSE;
init( FB2_alpha) := FALSE;
init( FB2_beta) := FALSE;
init(FB3_INIT) := FALSE;
init(FB3_REQ) := FALSE;
init(FB3_NDT) := FALSE;
init(FB3_INITO) := FALSE;
init(FB3_CHG) := FALSE;
init(FB3_LightOn) := FALSE;
init(FB3_Pressed) := FALSE;
init( FB3_alpha) := FALSE;
init( FB3_beta) := FALSE;
init(тFB4_INIT) := FALSE;
init(тFB4_REQ) := FALSE;
init(тFB4_NDT) := FALSE;
init(тFB4_INITO) := FALSE;
init(тFB4_CHG) := FALSE;
init(тFB4_FWD) := FALSE;
init(тFB4_BACK) := FALSE;
init(тFB4_HOME) := FALSE;
init(тFB4_END) := FALSE;
init( тFB4_alpha) := FALSE;
init( тFB4_beta) := FALSE;
init(FB5_INIT) := FALSE;
init(FB5_REQ) := FALSE;
init(FB5_NDT) := FALSE;
init(FB5_INITO) := FALSE;
init(FB5_CHG) := FALSE;
init(FB5_FWD) := FALSE;
init(FB5_BACK) := FALSE;
init(FB5_HOME) := FALSE;
init(FB5_END) := FALSE;
init( FB5_alpha) := FALSE;
init( FB5_beta) := FALSE;


-- generateInternalDataConnections


-- generateInnerFBsEventOutputsUpdate

next(FB3_INITO) := case
	FB3.event_INITO_set : TRUE;
	TRUE : FALSE;
esac;
next(тFB4_INITO) := case
	тFB4.event_INITO_set : TRUE;
	TRUE : FALSE;
esac;
next(FB5_INITO) := case
	FB5.event_INITO_set : TRUE;
	TRUE : FALSE;
esac;
next(FB1_CNF) := case
	FB1.event_CNF_set : TRUE;
	TRUE : FALSE;
esac;
next(тFB4_CHG) := case
	тFB4.event_CHG_set : TRUE;
	TRUE : FALSE;
esac;
next(FB5_CHG) := case
	FB5.event_CHG_set : TRUE;
	TRUE : FALSE;
esac;
next(FB1_INITO) := case
	FB1.event_INITO_set : TRUE;
	TRUE : FALSE;
esac;
next(FB2_CNF) := case
	FB2.event_CNF_set : TRUE;
	TRUE : FALSE;
esac;
next(FB3_CHG) := case
	FB3.event_CHG_set : TRUE;
	TRUE : FALSE;
esac;
next(FB2_INITO) := case
	FB2.event_INITO_set : TRUE;
	TRUE : FALSE;
esac;

-- DISPATCHER

next(FB1_alpha):= case
	alpha & omega & !ExistsInputEvent : TRUE;
	FB1.alpha_reset : FALSE;
	TRUE : FB1_alpha;
esac;
next(FB1_beta):= case
	beta & omega & !ExistsInputEvent : TRUE;
	FB1.beta_set : FALSE;
	TRUE : FB1_beta;
esac;
next(FB2_alpha):= case
	alpha & omega & !ExistsInputEvent : TRUE;
	FB2.alpha_reset : FALSE;
	TRUE : FB2_alpha;
esac;
next(FB2_beta):= case
	beta & omega & !ExistsInputEvent : TRUE;
	FB2.beta_set : FALSE;
	TRUE : FB2_beta;
esac;
next(FB3_alpha):= case
	alpha & omega & !ExistsInputEvent : TRUE;
	FB3.alpha_reset : FALSE;
	TRUE : FB3_alpha;
esac;
next(FB3_beta):= case
	beta & omega & !ExistsInputEvent : TRUE;
	FB3.beta_set : FALSE;
	TRUE : FB3_beta;
esac;
next(тFB4_alpha):= case
	alpha & omega & !ExistsInputEvent : TRUE;
	тFB4.alpha_reset : FALSE;
	TRUE : тFB4_alpha;
esac;
next(тFB4_beta):= case
	beta & omega & !ExistsInputEvent : TRUE;
	тFB4.beta_set : FALSE;
	TRUE : тFB4_beta;
esac;
next(FB5_alpha):= case
	alpha & omega & !ExistsInputEvent : TRUE;
	FB5.alpha_reset : FALSE;
	TRUE : FB5_alpha;
esac;
next(FB5_beta):= case
	beta & omega & !ExistsInputEvent : TRUE;
	FB5.beta_set : FALSE;
	TRUE : FB5_beta;
esac;
DEFINE beta_reset:= & omega;
DEFINE alpha_reset:= alpha & omega & !ExistsInputEvent;

ASSIGN

-- generateInternalEventConnections

next(тFB4_INIT):= case
	(FB3_INITO)
	(тFB4.event_INIT_reset) : FALSE;
	TRUE : тFB4_INIT;
esac;

next(FB2_REQ):= case
	(FB5_CHG | FB3_CHG)
	(FB2.event_REQ_reset) : FALSE;
	TRUE : FB2_REQ;
esac;

next(FB1_INIT):= case
	(FB5_INITO)
	(FB1.event_INIT_reset) : FALSE;
	TRUE : FB1_INIT;
esac;

next(FB3_REQ):= case
	(FB2_INITO)
	(FB3.event_REQ_reset) : FALSE;
	TRUE : FB3_REQ;
esac;

next(FB5_INIT):= case
	(тFB4_INITO)
	(FB5.event_INIT_reset) : FALSE;
	TRUE : FB5_INIT;
esac;

next(FB5_REQ):= case
	(FB2_CNF)
	(FB5.event_REQ_reset) : FALSE;
	TRUE : FB5_REQ;
esac;

next(FB3_INIT):= case
	((event_null & alpha))
	(FB3.event_INIT_reset) : FALSE;
	TRUE : FB3_INIT;
esac;

next(тFB4_REQ):= case
	(FB1_CNF)
	(тFB4.event_REQ_reset) : FALSE;
	TRUE : тFB4_REQ;
esac;

next(FB1_REQ):= case
	(тFB4_CHG | FB3_CHG)
	(FB1.event_REQ_reset) : FALSE;
	TRUE : FB1_REQ;
esac;

next(FB2_INIT):= case
	(FB1_INITO)
	(FB2.event_INIT_reset) : FALSE;
	TRUE : FB2_INIT;
esac;

DEFINE event_INITO_set:= (FB2_INITO |  );
DEFINE event_INIT_reset:= alpha;
DEFINE ExistsInputEvent :=  event_INIT ;

DEFINE omega:= !(тFB4_INITO | FB5_INITO | FB3_CHG | FB1_INITO | FB2_CNF | тFB4_CHG | FB2_INITO | FB5_CHG | FB1_CNF | FB3_INITO);

DEFINE phi:= (!ExistsInputEvent) & (!(тFB4_INIT | FB2_REQ | FB1_INIT | FB3_REQ | FB5_INIT | FB5_REQ | FB3_INIT | тFB4_REQ | FB1_REQ | FB2_INIT |  | тFB4_INITO | FB5_INITO | FB3_CHG | FB1_INITO | FB2_CNF | тFB4_CHG | FB2_INITO | FB5_CHG | FB1_CNF | FB3_INITO ));
FAIRNESS (alpha)
FAIRNESS (beta)


MODULE main()
VAR TwoCylDiscr_inst : TwoCylDiscr (TwoCylDiscr_inst_INIT, TwoCylDiscr_inst_INITO,  TwoCylDiscr_inst_alpha, TwoCylDiscr_inst_beta);

VAR TwoCylDiscr_inst_INIT : boolean;
VAR TwoCylDiscr_inst_INITO : boolean;
VAR TwoCylDiscr_inst_alpha : boolean;
VAR TwoCylDiscr_inst_beta : boolean;
VAR false_var : boolean;

ASSIGN
init(false_var):= FALSE;
next(false_var):= FALSE;
init (TwoCylDiscr_inst_INIT) := TRUE;
init (TwoCylDiscr_inst_INITO) := TRUE;
init(TwoCylDiscr_inst_alpha):= TRUE;
init(TwoCylDiscr_inst_beta):= FALSE;

next(TwoCylDiscr_inst_INIT):= case
TwoCylDiscr_inst.event_INIT_reset : FALSE;
	TRUE : TwoCylDiscr_inst_INIT;
esac;
next(TwoCylDiscr_inst_INITO):= case
TwoCylDiscr_inst.event_INITO_reset : FALSE;
	TRUE : TwoCylDiscr_inst_INITO;
esac;
next(TwoCylDiscr_inst_alpha):= case
	TwoCylDiscr_inst_beta : TRUE;
	TwoCylDiscr_inst.alpha_reset : FALSE;
	TRUE : TwoCylDiscr_inst_alpha;
esac;
next(TwoCylDiscr_inst_beta):= case
	TwoCylDiscr_inst_beta : FALSE;
	TwoCylDiscr_inst.beta_set : TRUE;
	TRUE : TwoCylDiscr_inst_beta;
esac;

LTLSPEC F false_var=TRUE